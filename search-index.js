crystal_doc_search_index_callback({"repository_name":"money","body":"# money [![CI](https://github.com/crystal-money/money/actions/workflows/ci.yml/badge.svg)](https://github.com/crystal-money/money/actions/workflows/ci.yml) [![Releases](https://img.shields.io/github/release/crystal-money/money.svg)](https://github.com/crystal-money/money/releases) [![License](https://img.shields.io/github/license/crystal-money/money.svg)](https://github.com/crystal-money/money/blob/master/LICENSE)\n\n## Introduction\n\nA Crystal shard for dealing with money and currency conversion ported from [RubyMoney](https://github.com/RubyMoney/money).\n\n### Features\n\n- Provides a `Money` class which encapsulates all information about an certain\n  amount of money, such as its value and its currency.\n- Provides a `Money::Currency` class which encapsulates all information about\n  a monetary unit.\n- Represents monetary values as integers, in cents. This avoids floating point\n  rounding errors.\n- Represents currency as `Money::Currency` instances providing a high level of\n  flexibility.\n- Provides APIs for exchanging money from one currency to another.\n\n### Resources\n\n- [API Documentation](https://crystal-money.github.io/money/)\n- [Git Repository](https://github.com/crystal-money/money)\n\n### Notes\n\n- Your app must use UTF-8 to function with this library. There are a\n  number of non-ASCII currency attributes.\n- This app requires JSON.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  money:\n    github: crystal-money/money\n```\n\nInstall with `shards install`.\n\n## Usage\n\n```crystal\nrequire \"money\"\n\n# 10.00 USD\nmoney = Money.new(1000, \"USD\")\nmoney.cents    # => 1000\nmoney.currency # => Money::Currency.find(\"USD\")\n\n# Comparisons\nMoney.new(1000, \"USD\") == Money.new(1000, \"USD\") # => true\nMoney.new(1000, \"USD\") == Money.new(100,  \"USD\") # => false\nMoney.new(1000, \"USD\") == Money.new(1000, \"EUR\") # => false\nMoney.new(1000, \"USD\") != Money.new(1000, \"EUR\") # => true\n\n# Arithmetic\nMoney.new(1000, \"USD\") + Money.new(500, \"USD\") == Money.new(1500, \"USD\")\nMoney.new(1000, \"USD\") - Money.new(200, \"USD\") == Money.new(800,  \"USD\")\nMoney.new(1000, \"USD\") / 5                     == Money.new(200,  \"USD\")\nMoney.new(1000, \"USD\") * 5                     == Money.new(5000, \"USD\")\n\n# Unit to subunit conversions\nMoney.from_amount(5, \"USD\") == Money.new(500,  \"USD\") # 5 USD\nMoney.from_amount(5, \"JPY\") == Money.new(5,    \"JPY\") # 5 JPY\nMoney.from_amount(5, \"TND\") == Money.new(5000, \"TND\") # 5 TND\n\n# Currency conversions\nsome_code_to_setup_exchange_rates\nMoney.new(1000, \"USD\").exchange_to(\"EUR\") == Money.new(some_value, \"EUR\")\n\n# Formatting (see Formatting section for more options)\nMoney.new(100, \"USD\").format # => \"$1.00\"\nMoney.new(100, \"GBP\").format # => \"£1.00\"\nMoney.new(100, \"EUR\").format # => \"€1.00\"\n```\n\n## Currency\n\nCurrencies are consistently represented as instances of `Money::Currency`.\nThe most part of `Money` APIs allows you to supply either a `String`, `Symbol`\nor a `Money::Currency`.\n\n```crystal\nMoney.new(1000, \"USD\") == Money.new(1000, Money::Currency.find(\"USD\"))\nMoney.new(1000, \"EUR\").currency == Money::Currency.find(:eur)\nMoney.new(1000, \"PLN\").currency == Money::Currency[:pln]\n```\n\nA `Money::Currency` instance holds all the information about the currency,\nincluding the currency symbol, name and much more.\n\n```crystal\ncurrency = Money.new(1000, \"USD\").currency\ncurrency.code # => \"USD\"\ncurrency.name # => \"United States Dollar\"\n```\n\nTo define a new `Money::Currency` use `Money::Currency.register` as shown\nbelow.\n\n```crystal\ncurrency = Money::Currency.new(\n  priority:            1,\n  code:                \"USD\",\n  iso_numeric:         840,\n  name:                \"United States Dollar\",\n  symbol:              \"$\",\n  symbol_first:        true,\n  subunit:             \"Cent\",\n  subunit_to_unit:     100,\n  decimal_mark:        \".\",\n  thousands_separator: \",\"\n)\n\nMoney::Currency.register(currency)\n```\n\nThe pre-defined set of attributes includes:\n\n- `:priority` a numerical value you can use to sort/group the currency list\n- `:code` the international 3-letter code as defined by the ISO 4217 standard\n- `:iso_numeric` the international 3-digit code as defined by the ISO 4217 standard\n- `:name` the currency name\n- `:symbol` the currency symbol (UTF-8 encoded)\n- `:symbol_first` whether a money symbol should go before the amount\n- `:subunit` the name of the fractional monetary unit\n- `:subunit_to_unit` the proportion between the unit and the subunit\n- `:decimal_mark` character between the whole and fraction amounts\n- `:thousands_separator` character between each thousands place\n\nAll attributes except `:code` and `:subunit_to_unit` are optional.\nSome attributes, such as `:symbol`, are used by the `Money` class to print out a\nrepresentation of the object. Other attributes, such as `:name` or `:priority`,\nexist to provide a basic API you can take advantage of to build your application.\n\n### :priority\n\nThe priority attribute is an arbitrary numerical value you can assign to the\n`Money::Currency` and use in sorting/grouping operation.\n\nFor instance, let's assume your web application needs to render a currency\nselector like the one available\n[here](https://finance.yahoo.com/currency-converter/). You can create a couple of\ncustom methods to return the list of major currencies and all currencies as\nfollows:\n\n```crystal\n# Returns an array of currency id where priority < 10\ndef major_currencies(hash)\n  hash.values.sort.take_while(&.priority.try(&.<(10))).map(&.id)\nend\n\n# Returns an array of all currency id\ndef all_currencies(hash)\n  hash.keys\nend\n\nmajor_currencies(Money::Currency.table)\n# => [\"usd\", \"eur\", \"gbp\", \"aud\", \"cad\", \"jpy\"]\n\nall_currencies(Money::Currency.table)\n# => [\"aed\", \"afn\", \"all\", ...]\n```\n\n### Default Currency\n\nBy default `Money` defaults to USD as its currency. This can be overwritten\nusing:\n\n```crystal\nMoney.default_currency = Money::Currency.find(\"CAD\")\n# or\nMoney.default_currency = :cad\n```\n\n### Currency Exponent\n\nThe exponent of a money value is the number of digits after the decimal\nseparator (which separates the major unit from the minor unit). See e.g.\n[ISO 4217](https://www.currency-iso.org/en/shared/amendments/iso-4217-amendment.html) for more\ninformation. You can find the exponent (as an `Int32`) by\n\n```crystal\nMoney::Currency.find(\"USD\").exponent # => 2\nMoney::Currency.find(\"JPY\").exponent # => 0\nMoney::Currency.find(\"MGA\").exponent # => 1\n```\n\n### Currency Lookup\n\nTo find a given currency by ISO 4217 numeric code (three digits) you can do\n\n```crystal\nMoney::Currency.find(&.iso_numeric.==(978)) # => #<Money::Currency @iso_numeric=978, @code=\"EUR\", @name=\"Euro\", @symbol=\"€\", @subunit=\"Cent\", @subunit_to_unit=100, @symbol_first=true ...>\n```\n\n## Currency Exchange\n\nExchanging money is performed through an exchange `Bank` object. The default\nexchange `Bank` object requires one to manually specify the exchange rate. Here's\nan example of how it works:\n\n```crystal\nMoney.default_bank.store[\"USD\", \"EUR\"] = 1.24515\nMoney.default_bank.store[\"EUR\", \"USD\"] = 0.803115\n\nMoney.new(100, \"USD\").exchange_to(\"EUR\") # => Money.new(@amount=1.24, @currency=\"EUR\")\nMoney.new(100, \"EUR\").exchange_to(\"USD\") # => Money.new(@amount=0.8,  @currency=\"USD\")\n```\n\nComparison and arithmetic operations work as expected:\n\n```crystal\nMoney.new(1000, \"USD\") <=> Money.new(900, \"USD\") # => 1; 9.00 USD is smaller\nMoney.new(1000, \"EUR\") + Money.new(10, \"EUR\") # => Money.new(@amount=10.1, @currency=\"EUR\")\n\nMoney.default_bank.store[\"USD\", \"EUR\"] = 0.5\nMoney.new(1000, \"EUR\") + Money.new(1000, \"USD\") # => Money.new(@amount=15, @currency=\"EUR\")\n```\n\n### Exchange rate stores\n\nThe default bank is initialized with an in-memory store for exchange rates.\n\n```crystal\nMoney.default_bank = Money::Bank::VariableExchange.new(Money::Currency::RateStore::Memory.new)\n```\n\nYou can pass you own store implementation, ie. for storing and retrieving rates off a database, file, cache, etc.\n\n```crystal\nMoney.default_bank = Money::Bank::VariableExchange.new(MyCustomStore.new)\n\n# Add to the underlying store\nMoney.default_bank.store[\"USD\", \"CAD\"] = 0.9\n\n# Retrieve from the underlying store\nMoney.default_bank.store[\"USD\", \"CAD\"] # => 0.9\n\n# Exchanging amounts just works\nMoney.new(10.0, \"USD\").exchange_to(\"CAD\") # => Money(@amount=9 @currency=\"CAD\")\n```\n\nThere is nothing stopping you from creating store objects which scrapes\n[XE](http://www.xe.com) for the current rates or just returns `rand(2)`:\n\n```crystal\nMoney.default_bank = Money::Bank::VariableExchange.new(StoreWhichScrapesXeDotCom.new)\n```\n\nYou can also implement your own `Bank` to calculate exchanges differently.\nDifferent banks can share Stores.\n\n```crystal\nMoney.default_bank = MyCustomBank.new(Money::Currency::RateStore::Memory.new)\n```\n\nIf you wish to disable automatic currency conversion to prevent arithmetic when\ncurrencies don't match:\n\n```crystal\nMoney.disallow_currency_conversion!\n```\n\n## Rounding\n\nBy default, `Money` objects are rounded to the nearest cent and the additional precision is not preserved:\n\n```crystal\nMoney.new(2.34567).to_s # => \"$2.35\"\n```\n\nTo round to the nearest cent (or anything more precise), you can use the `Money#round` method.\n\n```crystal\nMoney.new(2.34567).round(4).to_s # => \"$2.35\"\n```\n\nTo retain the additional precision, you will also need to set `Money.infinite_precision` to `true`.\n\n```crystal\nMoney.infinite_precision = true\n\nMoney.new(2.34567).to_s          # => \"$2.34567\"\nMoney.new(2.34567).round(4).to_s # => \"$2.3457\"\n```\n\n## Formatting\n\nThere are several formatting rules for when `Money#format` is called. For more information, check out the [formatting module source](https://github.com/crystal-money/money/blob/master/src/money/money/formatting.cr), or read the latest release's [docs](http://crystal-money.github.io/money/Money/Formatting.html).\n\nIf you wish to format money according to the EU's [Rules for expressing monetary units](http://publications.europa.eu/code/en/en-370303.htm#position) in either English, Irish, Latvian or Maltese:\n\n```crystal\nmoney = Money.new(123, :gbp)               # => Money(@amount=1.23 @currency=\"GBP\")\nmoney.format(symbol: \"#{money.currency} \") # => \"GBP 1.23\"\n```\n\n## Heuristics\n\nTo parse a `String` containing amount with currency code or symbol you can do\n\n```crystal\nMoney.parse(\"$12.34\")    # => Money(@amount=12.34, @currency=\"USD\")\nMoney.parse(\"12.34 USD\") # => Money(@amount=12.34, @currency=\"USD\")\n```\n\n## Contributors\n\n- [Sija](https://github.com/Sija) Sijawusz Pur Rahnama - creator, maintainer\n\n## Thanks\n\nThanks to all of the [contributors](https://github.com/RubyMoney/money/blob/master/AUTHORS) for their awesome work on [RubyMoney](https://github.com/RubyMoney/money).\n","program":{"html_id":"money/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"money","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"money/BigDecimal","path":"BigDecimal.html","kind":"struct","full_name":"BigDecimal","name":"BigDecimal","abstract":false,"superclass":{"html_id":"money/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/ext/big_decimal.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/ext/big_decimal.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"https://github.com/crystal-lang/crystal/issues/7856","summary":"<p>https://github.com/crystal-lang/crystal/issues/7856</p>","instance_methods":[{"html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","abstract":false,"args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","args_html":"(json : JSON::Builder)","location":{"filename":"src/ext/big_decimal.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/ext/big_decimal.cr#L3"},"def":{"name":"to_json","args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"visibility":"Public","body":"json.string(self)"}},{"html_id":"to_json_object_key-instance-method","name":"to_json_object_key","abstract":false,"location":{"filename":"src/ext/big_decimal.cr","line_number":7,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/ext/big_decimal.cr#L7"},"def":{"name":"to_json_object_key","visibility":"Public","body":"to_s"}}]},{"html_id":"money/Money","path":"Money.html","kind":"struct","full_name":"Money","name":"Money","abstract":false,"superclass":{"html_id":"money/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Money/Exchange","kind":"module","full_name":"Money::Exchange","name":"Exchange"},{"html_id":"money/Money/Formatting","kind":"module","full_name":"Money::Formatting","name":"Formatting"},{"html_id":"money/Money/Allocate","kind":"module","full_name":"Money::Allocate","name":"Allocate"},{"html_id":"money/Money/Arithmetic","kind":"module","full_name":"Money::Arithmetic","name":"Arithmetic"},{"html_id":"money/Money/Casting","kind":"module","full_name":"Money::Casting","name":"Casting"},{"html_id":"money/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"money/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money.cr#L3"},{"filename":"src/money/bank.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L1"},{"filename":"src/money/bank/single_currency.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/single_currency.cr#L1"},{"filename":"src/money/bank/variable_exchange.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/variable_exchange.cr#L1"},{"filename":"src/money/currency.cr","line_number":6,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L6"},{"filename":"src/money/currency/enumeration.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L1"},{"filename":"src/money/currency/loader.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/loader.cr#L3"},{"filename":"src/money/error.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L1"},{"filename":"src/money/money.cr","line_number":16,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L16"},{"filename":"src/money/money/allocate.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/allocate.cr#L1"},{"filename":"src/money/money/arithmetic.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L1"},{"filename":"src/money/money/casting.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/casting.cr#L1"},{"filename":"src/money/money/constructors.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L1"},{"filename":"src/money/money/exchange.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/exchange.cr#L1"},{"filename":"src/money/money/formatting.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/formatting.cr#L1"},{"filename":"src/money/money/json.cr","line_number":5,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/json.cr#L5"},{"filename":"src/money/money/parse.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/parse.cr#L1"},{"filename":"src/money/version.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/version.cr#L1"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/money/money/src/money\\\"`).chomp.stringify }}"}],"included_modules":[{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"money/Money/Allocate","kind":"module","full_name":"Money::Allocate","name":"Allocate"},{"html_id":"money/Money/Arithmetic","kind":"module","full_name":"Money::Arithmetic","name":"Arithmetic"},{"html_id":"money/Money/Casting","kind":"module","full_name":"Money::Casting","name":"Casting"},{"html_id":"money/Money/Exchange","kind":"module","full_name":"Money::Exchange","name":"Exchange"},{"html_id":"money/Money/Formatting","kind":"module","full_name":"Money::Formatting","name":"Formatting"}],"extended_modules":[{"html_id":"money/Money/Constructors","kind":"module","full_name":"Money::Constructors","name":"Constructors"},{"html_id":"money/Money/Parse","kind":"module","full_name":"Money::Parse","name":"Parse"}],"doc":"\"Money is any object or record that is generally accepted as payment for\ngoods and services and repayment of debts in a given socio-economic context\nor country.\" - [Wikipedia](http://en.wikipedia.org/wiki/Money)\n\nAn instance of `Money` represents an amount of a specific currency.\n\n`Money` is a value object and should be treated as immutable.","summary":"<p>&quot;Money is any object or record that is generally accepted as payment for goods and services and repayment of debts in a given socio-economic context or country.&quot; - <a href=\"http://en.wikipedia.org/wiki/Money\">Wikipedia</a></p>","class_methods":[{"html_id":"default_bank:Bank-class-method","name":"default_bank","doc":"Each `Money` object is associated to a bank object, which is responsible\nfor currency exchange. This property allows you to specify the default\nbank object. The default value for this property is an instance of\n`Bank::VariableExchange`. It allows one to specify custom exchange rates.","summary":"<p>Each <code><a href=\"Money.html\">Money</a></code> object is associated to a bank object, which is responsible for currency exchange.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":57,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L57"},"def":{"name":"default_bank","return_type":"Bank","visibility":"Public","body":"if (value = @@default_bank).nil?\n  @@default_bank = (Bank::VariableExchange.new)\nelse\n  value\nend"}},{"html_id":"default_bank=(default_bank:Bank)-class-method","name":"default_bank=","doc":"Each `Money` object is associated to a bank object, which is responsible\nfor currency exchange. This property allows you to specify the default\nbank object. The default value for this property is an instance of\n`Bank::VariableExchange`. It allows one to specify custom exchange rates.","summary":"<p>Each <code><a href=\"Money.html\">Money</a></code> object is associated to a bank object, which is responsible for currency exchange.</p>","abstract":false,"args":[{"name":"default_bank","external_name":"default_bank","restriction":"Bank"}],"args_string":"(default_bank : Bank)","args_html":"(default_bank : <a href=\"Money/Bank.html\">Bank</a>)","location":{"filename":"src/money/money.cr","line_number":57,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L57"},"def":{"name":"default_bank=","args":[{"name":"default_bank","external_name":"default_bank","restriction":"Bank"}],"visibility":"Public","body":"@@default_bank = default_bank"}},{"html_id":"default_currency:Currency-class-method","name":"default_currency","doc":"Sets the default currency for creating new `Money` object.","summary":"<p>Sets the default currency for creating new <code><a href=\"Money.html\">Money</a></code> object.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":46,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L46"},"def":{"name":"default_currency","return_type":"Currency","visibility":"Public","body":"if (value = @@default_currency).nil?\n  @@default_currency = (Currency.find(\"USD\"))\nelse\n  value\nend"}},{"html_id":"default_currency=(default_currency:Currency)-class-method","name":"default_currency=","doc":"Sets the default currency for creating new `Money` object.","summary":"<p>Sets the default currency for creating new <code><a href=\"Money.html\">Money</a></code> object.</p>","abstract":false,"args":[{"name":"default_currency","external_name":"default_currency","restriction":"Currency"}],"args_string":"(default_currency : Currency)","args_html":"(default_currency : <a href=\"Money/Currency.html\">Currency</a>)","location":{"filename":"src/money/money.cr","line_number":46,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L46"},"def":{"name":"default_currency=","args":[{"name":"default_currency","external_name":"default_currency","restriction":"Currency"}],"visibility":"Public","body":"@@default_currency = default_currency"}},{"html_id":"default_currency=(currency_code:String|Symbol)-class-method","name":"default_currency=","doc":"Sets the default currency for creating new `Money` object.","summary":"<p>Sets the default currency for creating new <code><a href=\"Money.html\">Money</a></code> object.</p>","abstract":false,"args":[{"name":"currency_code","external_name":"currency_code","restriction":"String | Symbol"}],"args_string":"(currency_code : String | Symbol)","args_html":"(currency_code : String | Symbol)","location":{"filename":"src/money/money.cr","line_number":49,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L49"},"def":{"name":"default_currency=","args":[{"name":"currency_code","external_name":"currency_code","restriction":"String | Symbol"}],"visibility":"Public","body":"self.default_currency = Currency.find(currency_code)"}},{"html_id":"disallow_currency_conversion!-class-method","name":"disallow_currency_conversion!","doc":"Sets the default bank to be a `Bank::SingleCurrency` bank that raises on\ncurrency exchange. Useful when apps operate in a single currency at a time.","summary":"<p>Sets the default bank to be a <code><a href=\"Money/Bank/SingleCurrency.html\">Bank::SingleCurrency</a></code> bank that raises on currency exchange.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":61,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L61"},"def":{"name":"disallow_currency_conversion!","visibility":"Public","body":"self.default_bank = Bank::SingleCurrency.new"}},{"html_id":"infinite_precision=(infinite_precision:Bool)-class-method","name":"infinite_precision=","doc":"Use this to enable infinite precision cents","summary":"<p>Use this to enable infinite precision cents</p>","abstract":false,"args":[{"name":"infinite_precision","external_name":"infinite_precision","restriction":"Bool"}],"args_string":"(infinite_precision : Bool)","args_html":"(infinite_precision : Bool)","location":{"filename":"src/money/money.cr","line_number":29,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L29"},"def":{"name":"infinite_precision=","args":[{"name":"infinite_precision","external_name":"infinite_precision","restriction":"Bool"}],"visibility":"Public","body":"@@infinite_precision = infinite_precision"}},{"html_id":"infinite_precision?:Bool-class-method","name":"infinite_precision?","doc":"Use this to enable infinite precision cents","summary":"<p>Use this to enable infinite precision cents</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":29,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L29"},"def":{"name":"infinite_precision?","return_type":"Bool","visibility":"Public","body":"@@infinite_precision"}},{"html_id":"rounding_mode:Number::RoundingMode-class-method","name":"rounding_mode","doc":"Default rounding mode","summary":"<p>Default rounding mode</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":32,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L32"},"def":{"name":"rounding_mode","return_type":"Number::RoundingMode","visibility":"Public","body":"@@rounding_mode"}},{"html_id":"rounding_mode=(rounding_mode:Number::RoundingMode)-class-method","name":"rounding_mode=","doc":"Default rounding mode","summary":"<p>Default rounding mode</p>","abstract":false,"args":[{"name":"rounding_mode","external_name":"rounding_mode","restriction":"Number::RoundingMode"}],"args_string":"(rounding_mode : Number::RoundingMode)","args_html":"(rounding_mode : Number::RoundingMode)","location":{"filename":"src/money/money.cr","line_number":32,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L32"},"def":{"name":"rounding_mode=","args":[{"name":"rounding_mode","external_name":"rounding_mode","restriction":"Number::RoundingMode"}],"visibility":"Public","body":"@@rounding_mode = rounding_mode"}},{"html_id":"with_rounding_mode(mode:Number::RoundingMode,&)-class-method","name":"with_rounding_mode","doc":"Sets the given rounding *mode* within the scope of the given block","summary":"<p>Sets the given rounding <em>mode</em> within the scope of the given block</p>","abstract":false,"args":[{"name":"mode","external_name":"mode","restriction":"Number::RoundingMode"}],"args_string":"(mode : Number::RoundingMode, &)","args_html":"(mode : Number::RoundingMode, &)","location":{"filename":"src/money/money.cr","line_number":35,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L35"},"def":{"name":"with_rounding_mode","args":[{"name":"mode","external_name":"mode","restriction":"Number::RoundingMode"}],"yields":0,"block_arity":0,"visibility":"Public","body":"prev_rounding_mode = rounding_mode\nself.rounding_mode = mode\nbegin\n  yield\nensure\n  self.rounding_mode = prev_rounding_mode\nend\n"}}],"constructors":[{"html_id":"new(amount:Number=0,currency=Money.default_currency,bank=nil)-class-method","name":"new","doc":"Creates a new `Money` object of value given as an *amount*\nof the given *currency* (as fractional if `Int`, or whole amount otherwise)\n\n```\nMoney.new                      # => Money(@amount=0 @currency=\"USD\")\nMoney.new(1_50)                # => Money(@amount=1.5 @currency=\"USD\")\nMoney.new(1.5, :usd)           # => Money(@amount=1.5 @currency=\"USD\")\nMoney.new(1.5.to_big_d, \"USD\") # => Money(@amount=1.5 @currency=\"USD\")\n```","summary":"<p>Creates a new <code><a href=\"Money.html\">Money</a></code> object of value given as an <em>amount</em> of the given <em>currency</em> (as fractional if <code>Int</code>, or whole amount otherwise)</p>","abstract":false,"args":[{"name":"amount","default_value":"0","external_name":"amount","restriction":"Number"},{"name":"currency","default_value":"Money.default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(amount : Number = 0, currency = Money.default_currency, bank = nil)","args_html":"(amount : Number = <span class=\"n\">0</span>, currency = <span class=\"t\">Money</span>.default_currency, bank = <span class=\"n\">nil</span>)","location":{"filename":"src/money/money.cr","line_number":90,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L90"},"def":{"name":"new","args":[{"name":"amount","default_value":"0","external_name":"amount","restriction":"Number"},{"name":"currency","default_value":"Money.default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(amount, currency, bank)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/money/money/json.cr","line_number":11,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/json.cr#L11"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"case pull.kind\nwhen .string?\n  parse(pull.read_string)\nelse\n  previous_def(pull)\nend"}}],"instance_methods":[{"html_id":"<=>(other:Money):Int32-instance-method","name":"<=>","doc":"Compares two `Money` objects.","summary":"<p>Compares two <code><a href=\"Money.html\">Money</a></code> objects.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money) : Int32","args_html":"(other : <a href=\"Money.html\">Money</a>) : Int32","location":{"filename":"src/money/money.cr","line_number":127,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L127"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Money"}],"return_type":"Int32","visibility":"Public","body":"if zero? && other.zero?\n  return 0\nend\nwith_same_currency(other) do |converted_other|\n  amount <=> converted_other.amount\nend\n"}},{"html_id":"amount:BigDecimal-instance-method","name":"amount","doc":"Returns the numerical value of the money.\n\n```\nMoney.new(1_00, \"USD\").amount # => 1.0\n```\n\nSee `#to_big_d` and `#fractional`, also `Money.rounding_mode`.","summary":"<p>Returns the numerical value of the money.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":141,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L141"},"def":{"name":"amount","return_type":"BigDecimal","visibility":"Public","body":"if Money.infinite_precision?\n  return @amount\nend\n@amount.round(currency.exponent, mode: Money.rounding_mode)\n"}},{"html_id":"bank:Bank-instance-method","name":"bank","doc":"The `Bank` object which currency exchanges are performed with.\n\nNOTE: Setting `nil` (the default) will delegate to `Money.default_bank`.","summary":"<p>The <code><a href=\"Money/Bank.html\">Bank</a></code> object which currency exchanges are performed with.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":77,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L77"},"def":{"name":"bank","return_type":"Bank","visibility":"Public","body":"@bank || Money.default_bank"}},{"html_id":"bank=(bank:Bank|Nil)-instance-method","name":"bank=","doc":"The `Bank` object which currency exchanges are performed with.\n\nNOTE: Setting `nil` (the default) will delegate to `Money.default_bank`.","summary":"<p>The <code><a href=\"Money/Bank.html\">Bank</a></code> object which currency exchanges are performed with.</p>","abstract":false,"args":[{"name":"bank","external_name":"bank","restriction":"Bank | ::Nil"}],"args_string":"(bank : Bank | Nil)","args_html":"(bank : <a href=\"Money/Bank.html\">Bank</a> | Nil)","location":{"filename":"src/money/money.cr","line_number":74,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L74"},"def":{"name":"bank=","args":[{"name":"bank","external_name":"bank","restriction":"Bank | ::Nil"}],"visibility":"Public","body":"@bank = bank"}},{"html_id":"cents:BigInt-instance-method","name":"cents","doc":"Alias of `#fractional`.","summary":"<p>Alias of <code><a href=\"Money.html#fractional%3ABigInt-instance-method\">#fractional</a></code>.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":169,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L169"},"def":{"name":"cents","return_type":"BigInt","visibility":"Public","body":"fractional"}},{"html_id":"currency:Currency-instance-method","name":"currency","doc":"The money's currency.","summary":"<p>The money's currency.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":69,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L69"},"def":{"name":"currency","return_type":"Currency","visibility":"Public","body":"@currency"}},{"html_id":"dollars:BigDecimal-instance-method","name":"dollars","doc":"Alias of `#amount`.","summary":"<p>Alias of <code><a href=\"Money.html#amount%3ABigDecimal-instance-method\">#amount</a></code>.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":164,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L164"},"def":{"name":"dollars","return_type":"BigDecimal","visibility":"Public","body":"amount"}},{"html_id":"fractional:BigInt-instance-method","name":"fractional","doc":"The value of the monetary amount represented in the fractional or subunit\nof the currency.\n\nFor example, in the US dollar currency the fractional unit is cents, and\nthere are 100 cents in one US dollar. So given the `Money` representation of\none US dollar, the fractional interpretation is 100.\n\nAnother example is that of the Kuwaiti dinar. In this case the fractional\nunit is the fils and there 1000 fils to one Kuwaiti dinar. So given the\n`Money` representation of one Kuwaiti dinar, the fractional interpretation\nis 1000.\n\nFIXME: Doesn't work with `Money.infinite_precision?` yet","summary":"<p>The value of the monetary amount represented in the fractional or subunit of the currency.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":159,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L159"},"def":{"name":"fractional","return_type":"BigInt","visibility":"Public","body":"(amount * currency.subunit_to_unit).to_big_i"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Returns hash value based on the `amount` and `currency` attributes.","summary":"<p>Returns hash value based on the <code><a href=\"Money.html#amount%3ABigDecimal-instance-method\">#amount</a></code> and <code><a href=\"Money.html#currency%3ACurrency-instance-method\">#currency</a></code> attributes.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/money/money.cr","line_number":124,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L124"},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = amount.hash(hasher)\nhasher = currency.hash(hasher)\nhasher\n"}},{"html_id":"nearest_cash_value:BigInt-instance-method","name":"nearest_cash_value","doc":"Returns the nearest possible amount in cash value (cents).\n\nFor example, in Swiss franc (CHF), the smallest possible amount of\ncash value is CHF 0.05. Therefore, for CHF 0.07 this method returns CHF 0.05,\nand for CHF 0.08, CHF 0.10.\n\nSee `Currency#smallest_denomination`, also `Money.rounding_mode`.","summary":"<p>Returns the nearest possible amount in cash value (cents).</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":180,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L180"},"def":{"name":"nearest_cash_value","return_type":"BigInt","visibility":"Public","body":"if smallest_denomination = currency.smallest_denomination\nelse\n  raise(UndefinedSmallestDenominationError.new)\nend\nrounded_value = (fractional.to_big_d / smallest_denomination).round(mode: Money.rounding_mode)\nrounded_value = rounded_value * smallest_denomination\nrounded_value.to_big_i\n"}},{"html_id":"rounded_to_nearest_cash_value:Money-instance-method","name":"rounded_to_nearest_cash_value","doc":"See `#nearest_cash_value`.","summary":"<p>See <code><a href=\"Money.html#nearest_cash_value%3ABigInt-instance-method\">#nearest_cash_value</a></code>.</p>","abstract":false,"location":{"filename":"src/money/money.cr","line_number":191,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money.cr#L191"},"def":{"name":"rounded_to_nearest_cash_value","return_type":"Money","visibility":"Public","body":"copy_with(fractional: nearest_cash_value)"}}],"types":[{"html_id":"money/Money/Allocate","path":"Money/Allocate.html","kind":"module","full_name":"Money::Allocate","name":"Allocate","abstract":false,"locations":[{"filename":"src/money/money/allocate.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/allocate.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"allocate(splits:Enumerable(Number)):Array(Money)-instance-method","name":"allocate","doc":"Allocates money between different parties without losing pennies.\nAfter the mathematical split has been performed, leftover pennies will\nbe distributed round-robin amongst the parties. This means that parties\nlisted first will likely receive more pennies than ones that are listed later.\n\n```\n# Give 50% of the cash to party 1, 25% to party 2, and 25% to party 3.\nMoney.new(10_00, \"USD\").allocate([0.5, 0.25, 0.25]).map(&.cents)\n# => [5_00, 2_50, 2_50]\n\nMoney.new(5, \"USD\").allocate({0.3, 0.7}).map(&.cents)\n# => [2, 3]\n\nMoney.new(100, \"USD\").allocate(0.33, 0.33, 0.33).map(&.cents)\n# => [34, 33, 33]\n```","summary":"<p>Allocates money between different parties without losing pennies.</p>","abstract":false,"args":[{"name":"splits","external_name":"splits","restriction":"Enumerable(Number)"}],"args_string":"(splits : Enumerable(Number)) : Array(Money)","args_html":"(splits : Enumerable(Number)) : Array(<a href=\"../Money.html\">Money</a>)","location":{"filename":"src/money/money/allocate.cr","line_number":37,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/allocate.cr#L37"},"def":{"name":"allocate","args":[{"name":"splits","external_name":"splits","restriction":"Enumerable(Number)"}],"return_type":"Array(Money)","visibility":"Public","body":"allocations = allocations_from_splits(splits)\nif allocations > 1.0\n  raise(ArgumentError.new(\"Splits add to more then 100%\"))\nend\nif splits.all?(&.zero?)\n  allocations = splits.size.to_f\nend\namounts, left_over = amounts_from_splits(allocations, splits)\ndelta = left_over > 0 ? 1 : -1\nsize = amounts.size\nleft_over.to_i64.abs.times do |i|\n  __temp_44 = i % size\n  amounts[__temp_44] = amounts[__temp_44] + delta\nend\namounts.map do |fractional|\n  copy_with(fractional: fractional.to_big_i)\nend\n"}},{"html_id":"allocate(*splits:Number):Array(Money)-instance-method","name":"allocate","doc":"Allocates money between different parties without losing pennies.\nAfter the mathematical split has been performed, leftover pennies will\nbe distributed round-robin amongst the parties. This means that parties\nlisted first will likely receive more pennies than ones that are listed later.\n\n```\n# Give 50% of the cash to party 1, 25% to party 2, and 25% to party 3.\nMoney.new(10_00, \"USD\").allocate([0.5, 0.25, 0.25]).map(&.cents)\n# => [5_00, 2_50, 2_50]\n\nMoney.new(5, \"USD\").allocate({0.3, 0.7}).map(&.cents)\n# => [2, 3]\n\nMoney.new(100, \"USD\").allocate(0.33, 0.33, 0.33).map(&.cents)\n# => [34, 33, 33]\n```","summary":"<p>Allocates money between different parties without losing pennies.</p>","abstract":false,"args":[{"name":"splits","external_name":"splits","restriction":"Number"}],"args_string":"(*splits : Number) : Array(Money)","args_html":"(*splits : Number) : Array(<a href=\"../Money.html\">Money</a>)","location":{"filename":"src/money/money/allocate.cr","line_number":59,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/allocate.cr#L59"},"def":{"name":"allocate","args":[{"name":"splits","external_name":"splits","restriction":"Number"}],"splat_index":0,"return_type":"Array(Money)","visibility":"Public","body":"allocate(splits)"}},{"html_id":"split(num:Int):Array(Money)-instance-method","name":"split","doc":"Splits money amongst parties evenly without losing pennies.\n\n```\nMoney.new(100, \"USD\").split(3).map(&.cents) # => [34, 33, 33]\n```","summary":"<p>Splits money amongst parties evenly without losing pennies.</p>","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"Int"}],"args_string":"(num : Int) : Array(Money)","args_html":"(num : Int) : Array(<a href=\"../Money.html\">Money</a>)","location":{"filename":"src/money/money/allocate.cr","line_number":8,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/allocate.cr#L8"},"def":{"name":"split","args":[{"name":"num","external_name":"num","restriction":"Int"}],"return_type":"Array(Money)","visibility":"Public","body":"if num < 1\n  raise(ArgumentError.new(\"Need at least one party\"))\nend\nlow = copy_with(fractional: fractional // num)\nhigh = copy_with(fractional: low.fractional + 1)\nremainder = fractional % num\nArray(Money).new(num) do |index|\n  index < remainder ? high : low\nend\n"}}]},{"html_id":"money/Money/Arithmetic","path":"Money/Arithmetic.html","kind":"module","full_name":"Money::Arithmetic","name":"Arithmetic","abstract":false,"locations":[{"filename":"src/money/money/arithmetic.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"%(other):Money-instance-method","name":"%","doc":"Alias of `#modulo`.","summary":"<p>Alias of <code><a href=\"../Money/Arithmetic.html#modulo%28other%29%3AMoney-instance-method\">#modulo</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other) : Money","args_html":"(other) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":152,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L152"},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":""}],"return_type":"Money","visibility":"Public","body":"modulo(other)"}},{"html_id":"*(other:Number):Money-instance-method","name":"*","doc":"Multiplies the monetary value with the given *other* `Number` and returns\na new `Money` object with this monetary value and the same `#currency`.\n\n```\nMoney.new(100) * 2 # => Money(@amount=2)\n```","summary":"<p>Multiplies the monetary value with the given <em>other</em> <code>Number</code> and returns a new <code><a href=\"../Money.html\">Money</a></code> object with this monetary value and the same <code>#currency</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : Money","args_html":"(other : Number) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":95,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L95"},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Number"}],"return_type":"Money","visibility":"Public","body":"copy_with(amount: amount * other)"}},{"html_id":"+(other:Money):Money-instance-method","name":"+","doc":"Returns a new `Money` object containing the sum of the two\noperands' monetary values.\n\n```\nMoney.new(100) + Money.new(100) # => Money(@amount=2)\n```","summary":"<p>Returns a new <code><a href=\"../Money.html\">Money</a></code> object containing the sum of the two operands' monetary values.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money) : Money","args_html":"(other : <a href=\"../Money.html\">Money</a>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":69,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L69"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Money"}],"return_type":"Money","visibility":"Public","body":"if other.zero?\n  return self\nend\nwith_same_currency(other) do |converted_other|\n  copy_with(amount: amount + converted_other.amount)\nend\n"}},{"html_id":"+:Money-instance-method","name":"+","doc":"Alias of `#abs`.\n\n```\n+Money.new(-100) # => Money(@amount=1)\n```","summary":"<p>Alias of <code><a href=\"../Money/Arithmetic.html#abs%3AMoney-instance-method\">#abs</a></code>.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":50,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L50"},"def":{"name":"+","return_type":"Money","visibility":"Public","body":"abs"}},{"html_id":"-(other:Money):Money-instance-method","name":"-","doc":"Returns a new `Money` object containing the difference between the two\noperands' monetary values.\n\n```\nMoney.new(100) - Money.new(99) # => Money(@amount=0.01)\n```","summary":"<p>Returns a new <code><a href=\"../Money.html\">Money</a></code> object containing the difference between the two operands' monetary values.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money) : Money","args_html":"(other : <a href=\"../Money.html\">Money</a>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":82,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L82"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Money"}],"return_type":"Money","visibility":"Public","body":"if other.zero?\n  return self\nend\nwith_same_currency(other) do |converted_other|\n  copy_with(amount: amount - converted_other.amount)\nend\n"}},{"html_id":"-:Money-instance-method","name":"-","doc":"Returns a new `Money` object with changed polarity.\n\n```\n-Money.new(100) # => Money(@amount=-1)\n```","summary":"<p>Returns a new <code><a href=\"../Money.html\">Money</a></code> object with changed polarity.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":59,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L59"},"def":{"name":"-","return_type":"Money","visibility":"Public","body":"copy_with(amount: -amount)"}},{"html_id":"/(other:Number):Money-instance-method","name":"/","doc":"Divides the monetary value with the given *other* `Number` and returns\na new `Money` object with this monetary value and the same `#currency`.\n\n```\nMoney.new(100) / 10 # => Money(@amount=0.1)\n```","summary":"<p>Divides the monetary value with the given <em>other</em> <code>Number</code> and returns a new <code><a href=\"../Money.html\">Money</a></code> object with this monetary value and the same <code>#currency</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : Money","args_html":"(other : Number) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":105,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L105"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Number"}],"return_type":"Money","visibility":"Public","body":"copy_with(amount: amount / other)"}},{"html_id":"/(other:Money):BigDecimal-instance-method","name":"/","doc":"Divides the monetary value with the given *other* `Money` object and\nreturns a ratio.\n\n```\nMoney.new(100) / Money.new(10) # => 10.0\n```","summary":"<p>Divides the monetary value with the given <em>other</em> <code><a href=\"../Money.html\">Money</a></code> object and returns a ratio.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money) : BigDecimal","args_html":"(other : <a href=\"../Money.html\">Money</a>) : <a href=\"../BigDecimal.html\">BigDecimal</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":115,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L115"},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Money"}],"return_type":"BigDecimal","visibility":"Public","body":"with_same_currency(other) do |converted_other|\n  amount / converted_other.amount\nend"}},{"html_id":"abs:Money-instance-method","name":"abs","doc":"Returns absolute value of `self` as a new `Money` object.\n\n```\nMoney.new(-100).abs # => Money(@amount=1)\n```","summary":"<p>Returns absolute value of <code>self</code> as a new <code><a href=\"../Money.html\">Money</a></code> object.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":41,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L41"},"def":{"name":"abs","return_type":"Money","visibility":"Public","body":"copy_with(amount: amount.abs)"}},{"html_id":"divmod(other:Money):Tuple(BigInt,Money)-instance-method","name":"divmod","doc":"Divide by `Money` or `Number` and return `Tuple` containing\nquotient and modulus.\n\n```\nMoney.new(100).divmod(9)            # => {Money(@amount=0.11), Money(@amount=0.01)}\nMoney.new(100).divmod(Money.new(9)) # => {11, Money(@amount=0.01)}\n```","summary":"<p>Divide by <code><a href=\"../Money.html\">Money</a></code> or <code>Number</code> and return <code>Tuple</code> containing quotient and modulus.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money) : Tuple(BigInt, Money)","args_html":"(other : <a href=\"../Money.html\">Money</a>) : Tuple(BigInt, <a href=\"../Money.html\">Money</a>)","location":{"filename":"src/money/money/arithmetic.cr","line_number":128,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L128"},"def":{"name":"divmod","args":[{"name":"other","external_name":"other","restriction":"Money"}],"return_type":"::Tuple(BigInt, Money)","visibility":"Public","body":"with_same_currency(other) do |converted_other|\n  quotient, remainder = fractional.divmod(converted_other.fractional)\n  {quotient, copy_with(fractional: remainder)}\nend"}},{"html_id":"divmod(other:Number):Tuple(Money,Money)-instance-method","name":"divmod","doc":"Divide by `Money` or `Number` and return `Tuple` containing\nquotient and modulus.\n\n```\nMoney.new(100).divmod(9)            # => {Money(@amount=0.11), Money(@amount=0.01)}\nMoney.new(100).divmod(Money.new(9)) # => {11, Money(@amount=0.01)}\n```","summary":"<p>Divide by <code><a href=\"../Money.html\">Money</a></code> or <code>Number</code> and return <code>Tuple</code> containing quotient and modulus.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : Tuple(Money, Money)","args_html":"(other : Number) : Tuple(<a href=\"../Money.html\">Money</a>, <a href=\"../Money.html\">Money</a>)","location":{"filename":"src/money/money/arithmetic.cr","line_number":136,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L136"},"def":{"name":"divmod","args":[{"name":"other","external_name":"other","restriction":"Number"}],"return_type":"::Tuple(Money, Money)","visibility":"Public","body":"quotient, remainder = fractional.divmod(other.to_big_i)\n{copy_with(fractional: quotient), copy_with(fractional: remainder)}\n"}},{"html_id":"modulo(other):Money-instance-method","name":"modulo","doc":"Equivalent to `#divmod(other)[1]`.\n\n```\nMoney.new(100).modulo(9)            # => Money(@amount=0.01)\nMoney.new(100).modulo(Money.new(9)) # => Money(@amount=0.01)\n```","summary":"<p>Equivalent to <code><a href=\"../Money/Arithmetic.html#divmod%28other%3AMoney%29%3ATuple%28BigInt%2CMoney%29-instance-method\">#divmod(other)</a>[1]</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other) : Money","args_html":"(other) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":147,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L147"},"def":{"name":"modulo","args":[{"name":"other","external_name":"other","restriction":""}],"return_type":"Money","visibility":"Public","body":"(divmod(other))[1]"}},{"html_id":"negative?-instance-method","name":"negative?","doc":"Returns `true` if the money amount is less than 0, `false` otherwise.\n\n```\nMoney.new(-1).negative? # => true\nMoney.new(0).negative?  # => false\nMoney.new(1).negative?  # => false\n```","summary":"<p>Returns <code>true</code> if the money amount is less than 0, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":21,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L21"},"def":{"name":"negative?","visibility":"Public","body":"amount < 0"}},{"html_id":"positive?-instance-method","name":"positive?","doc":"Returns `true` if the money amount is greater than 0, `false` otherwise.\n\n```\nMoney.new(1).positive?  # => true\nMoney.new(0).positive?  # => false\nMoney.new(-1).positive? # => false\n```","summary":"<p>Returns <code>true</code> if the money amount is greater than 0, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":10,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L10"},"def":{"name":"positive?","visibility":"Public","body":"amount > 0"}},{"html_id":"remainder(other:Number):Money-instance-method","name":"remainder","doc":"If different signs `#modulo(other) - other`, otherwise `#modulo(other)`.\n\n```\nMoney.new(100).remainder(9) # => Money(@amount=0.01)\n```","summary":"<p>If different signs <code><a href=\"../Money/Arithmetic.html#modulo%28other%29%3AMoney-instance-method\">#modulo(other)</a> - other</code>, otherwise <code><a href=\"../Money/Arithmetic.html#modulo%28other%29%3AMoney-instance-method\">#modulo(other)</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : Money","args_html":"(other : Number) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":161,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L161"},"def":{"name":"remainder","args":[{"name":"other","external_name":"other","restriction":"Number"}],"return_type":"Money","visibility":"Public","body":"if (amount < 0 && other < 0) || (amount > 0 && other > 0)\n  modulo(other)\nelse\n  (modulo(other)) - copy_with(amount: other)\nend"}},{"html_id":"round(precision:Int=0,mode:Number::RoundingMode=Money.rounding_mode):Money-instance-method","name":"round","doc":"Rounds the monetary amount to smallest unit of coinage, using\nrounding *mode* if given, or `Money.rounding_mode` otherwise.\n\n```\nMoney.new(10.1, \"USD\").round                   # => Money(@amount=10, @currency=\"USD\")\nMoney.new(10.5, \"USD\").round(mode: :ties_even) # => Money(@amount=10, @currency=\"USD\")\nMoney.new(10.5, \"USD\").round(mode: :ties_away) # => Money(@amount=11, @currency=\"USD\")\n```","summary":"<p>Rounds the monetary amount to smallest unit of coinage, using rounding <em>mode</em> if given, or <code><a href=\"../Money.html#rounding_mode%3ANumber%3A%3ARoundingMode-class-method\">Money.rounding_mode</a></code> otherwise.</p>","abstract":false,"args":[{"name":"precision","default_value":"0","external_name":"precision","restriction":"Int"},{"name":"mode","default_value":"Money.rounding_mode","external_name":"mode","restriction":"Number::RoundingMode"}],"args_string":"(precision : Int = 0, mode : Number::RoundingMode = Money.rounding_mode) : Money","args_html":"(precision : Int = <span class=\"n\">0</span>, mode : Number::RoundingMode = <span class=\"t\">Money</span>.rounding_mode) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/arithmetic.cr","line_number":177,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L177"},"def":{"name":"round","args":[{"name":"precision","default_value":"0","external_name":"precision","restriction":"Int"},{"name":"mode","default_value":"Money.rounding_mode","external_name":"mode","restriction":"Number::RoundingMode"}],"return_type":"Money","visibility":"Public","body":"copy_with(amount: @amount.round(precision, mode: mode))"}},{"html_id":"zero?-instance-method","name":"zero?","doc":"Returns `true` if the money amount is zero.\n\n```\nMoney.new(0).zero?    # => true\nMoney.new(100).zero?  # => false\nMoney.new(-100).zero? # => false\n```","summary":"<p>Returns <code>true</code> if the money amount is zero.</p>","abstract":false,"location":{"filename":"src/money/money/arithmetic.cr","line_number":32,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/arithmetic.cr#L32"},"def":{"name":"zero?","visibility":"Public","body":"amount == 0"}}]},{"html_id":"money/Money/Bank","path":"Money/Bank.html","kind":"class","full_name":"Money::Bank","name":"Bank","abstract":true,"superclass":{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/bank.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"money/Money/Bank/SingleCurrency","kind":"class","full_name":"Money::Bank::SingleCurrency","name":"SingleCurrency"},{"html_id":"money/Money/Bank/VariableExchange","kind":"class","full_name":"Money::Bank::VariableExchange","name":"VariableExchange"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"class_methods":[{"html_id":"default_store:Currency::RateStore-class-method","name":"default_store","doc":"It defaults to using an in-memory, thread safe store instance for\nstoring exchange rates.","summary":"<p>It defaults to using an in-memory, thread safe store instance for storing exchange rates.</p>","abstract":false,"location":{"filename":"src/money/bank.cr","line_number":5,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L5"},"def":{"name":"default_store","return_type":"Currency::RateStore","visibility":"Public","body":"if (value = @@default_store).nil?\n  @@default_store = (Currency::RateStore::Memory.new)\nelse\n  value\nend"}},{"html_id":"default_store=(default_store:Currency::RateStore)-class-method","name":"default_store=","doc":"It defaults to using an in-memory, thread safe store instance for\nstoring exchange rates.","summary":"<p>It defaults to using an in-memory, thread safe store instance for storing exchange rates.</p>","abstract":false,"args":[{"name":"default_store","external_name":"default_store","restriction":"Currency::RateStore"}],"args_string":"(default_store : Currency::RateStore)","args_html":"(default_store : <a href=\"../Money/Currency/RateStore.html\">Currency::RateStore</a>)","location":{"filename":"src/money/bank.cr","line_number":5,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L5"},"def":{"name":"default_store=","args":[{"name":"default_store","external_name":"default_store","restriction":"Currency::RateStore"}],"visibility":"Public","body":"@@default_store = default_store"}}],"constructors":[{"html_id":"new(store:Money::Currency::RateStore|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"store","default_value":"nil","external_name":"store","restriction":"::Money::Currency::RateStore | ::Nil"}],"args_string":"(store : Money::Currency::RateStore | Nil = nil)","args_html":"(store : <a href=\"../Money/Currency/RateStore.html\">Money::Currency::RateStore</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/money/bank.cr","line_number":10,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L10"},"def":{"name":"new","args":[{"name":"store","default_value":"nil","external_name":"store","restriction":"::Money::Currency::RateStore | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(store)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"exchange(from:Money,to:Currency):Money-instance-method","name":"exchange","doc":"Exchanges the given `Money` object to a new `Money` object in\n*to* `Currency`.","summary":"<p>Exchanges the given <code><a href=\"../Money.html\">Money</a></code> object to a new <code><a href=\"../Money.html\">Money</a></code> object in <em>to</em> <code><a href=\"../Money/Currency.html\">Currency</a></code>.</p>","abstract":true,"args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"args_string":"(from : Money, to : Currency) : Money","args_html":"(from : <a href=\"../Money.html\">Money</a>, to : <a href=\"../Money/Currency.html\">Currency</a>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/bank.cr","line_number":15,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L15"},"def":{"name":"exchange","args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"return_type":"Money","visibility":"Public","body":""}},{"html_id":"store:Currency::RateStore-instance-method","name":"store","doc":"An exchange `Currency::RateStore` object, used to persist exchange rate pairs.","summary":"<p>An exchange <code><a href=\"../Money/Currency/RateStore.html\">Currency::RateStore</a></code> object, used to persist exchange rate pairs.</p>","abstract":false,"location":{"filename":"src/money/bank.cr","line_number":8,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L8"},"def":{"name":"store","return_type":"Currency::RateStore","visibility":"Public","body":"if (value = @store).nil?\n  @store = (self.class.default_store)\nelse\n  value\nend"}},{"html_id":"store=(store:Currency::RateStore)-instance-method","name":"store=","doc":"An exchange `Currency::RateStore` object, used to persist exchange rate pairs.","summary":"<p>An exchange <code><a href=\"../Money/Currency/RateStore.html\">Currency::RateStore</a></code> object, used to persist exchange rate pairs.</p>","abstract":false,"args":[{"name":"store","external_name":"store","restriction":"Currency::RateStore"}],"args_string":"(store : Currency::RateStore)","args_html":"(store : <a href=\"../Money/Currency/RateStore.html\">Currency::RateStore</a>)","location":{"filename":"src/money/bank.cr","line_number":8,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank.cr#L8"},"def":{"name":"store=","args":[{"name":"store","external_name":"store","restriction":"Currency::RateStore"}],"visibility":"Public","body":"@store = store"}}],"types":[{"html_id":"money/Money/Bank/SingleCurrency","path":"Money/Bank/SingleCurrency.html","kind":"class","full_name":"Money::Bank::SingleCurrency","name":"SingleCurrency","abstract":false,"superclass":{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},"ancestors":[{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/bank/single_currency.cr","line_number":9,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/single_currency.cr#L9"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},"doc":"Class to ensure client code is operating in a single currency\nby raising if an exchange attempts to happen.\n\nThis is useful when an application uses multiple currencies but\nit usually deals with only one currency at a time so any arithmetic\nwhere exchanges happen are erroneous. Using this as the default bank\nmeans that that these mistakes don't silently do the wrong thing.","summary":"<p>Class to ensure client code is operating in a single currency by raising if an exchange attempts to happen.</p>","instance_methods":[{"html_id":"exchange(from:Money,to:Currency):Money-instance-method","name":"exchange","doc":"Raises a `DifferentCurrencyError` to remove possibility of accidentally\nexchanging currencies.","summary":"<p>Raises a <code><a href=\"../../Money/DifferentCurrencyError.html\">DifferentCurrencyError</a></code> to remove possibility of accidentally exchanging currencies.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"args_string":"(from : Money, to : Currency) : Money","args_html":"(from : <a href=\"../../Money.html\">Money</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>) : <a href=\"../../Money.html\">Money</a>","location":{"filename":"src/money/bank/single_currency.cr","line_number":12,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/single_currency.cr#L12"},"def":{"name":"exchange","args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"return_type":"Money","visibility":"Public","body":"raise(DifferentCurrencyError.new(\"No exchanging of currencies allowed: #{from} #{from.currency} to #{to}\"))"}}]},{"html_id":"money/Money/Bank/VariableExchange","path":"Money/Bank/VariableExchange.html","kind":"class","full_name":"Money::Bank::VariableExchange","name":"VariableExchange","abstract":false,"superclass":{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},"ancestors":[{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/bank/variable_exchange.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/variable_exchange.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money/Bank","kind":"class","full_name":"Money::Bank","name":"Bank"},"instance_methods":[{"html_id":"calculate_fractional(from:Money,to:Currency):BigDecimal-instance-method","name":"calculate_fractional","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"args_string":"(from : Money, to : Currency) : BigDecimal","args_html":"(from : <a href=\"../../Money.html\">Money</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>) : <a href=\"../../BigDecimal.html\">BigDecimal</a>","location":{"filename":"src/money/bank/variable_exchange.cr","line_number":10,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/variable_exchange.cr#L10"},"def":{"name":"calculate_fractional","args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"return_type":"BigDecimal","visibility":"Public","body":"ratio = from.currency.subunit_to_unit.to_big_d / to.subunit_to_unit\nfrom.fractional.to_big_d / ratio\n"}},{"html_id":"exchange(from:Money,to:Currency):Money-instance-method","name":"exchange","doc":"Exchanges the given `Money` object to a new `Money` object in\n*to* `Currency`.","summary":"<p>Exchanges the given <code><a href=\"../../Money.html\">Money</a></code> object to a new <code><a href=\"../../Money.html\">Money</a></code> object in <em>to</em> <code><a href=\"../../Money/Currency.html\">Currency</a></code>.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"args_string":"(from : Money, to : Currency) : Money","args_html":"(from : <a href=\"../../Money.html\">Money</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>) : <a href=\"../../Money.html\">Money</a>","location":{"filename":"src/money/bank/variable_exchange.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/bank/variable_exchange.cr#L3"},"def":{"name":"exchange","args":[{"name":"from","external_name":"from","restriction":"Money"},{"name":"to","external_name":"to","restriction":"Currency"}],"return_type":"Money","visibility":"Public","body":"rate = store[from.currency, to]\nfractional = calculate_fractional(from, to)\nfractional = fractional * rate\nMoney.new(fractional.to_big_i, to, self)\n"}}]}]},{"html_id":"money/Money/Casting","path":"Money/Casting.html","kind":"module","full_name":"Money::Casting","name":"Casting","abstract":false,"locations":[{"filename":"src/money/money/casting.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/casting.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"to_big_d:BigDecimal-instance-method","name":"to_big_d","doc":"Returns the amount of money as a `BigDecimal`.\n\n```\nMoney.us_dollar(1_00).to_big_d # => BigDecimal.new(\"1.00\")\n```","summary":"<p>Returns the amount of money as a <code><a href=\"../BigDecimal.html\">BigDecimal</a></code>.</p>","abstract":false,"location":{"filename":"src/money/money/casting.cr","line_number":8,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/casting.cr#L8"},"def":{"name":"to_big_d","return_type":"BigDecimal","visibility":"Public","body":"amount"}},{"html_id":"to_big_f:BigFloat-instance-method","name":"to_big_f","doc":"Returns the amount of money as a `BigFloat`. Floating points cannot guarantee\nprecision. Therefore, this function should only be used when you no longer\nneed to represent currency or working with another system that requires\nfloats.\n\n```\nMoney.us_dollar(100).to_big_f # => 1.0\n```","summary":"<p>Returns the amount of money as a <code>BigFloat</code>.</p>","abstract":false,"location":{"filename":"src/money/money/casting.cr","line_number":20,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/casting.cr#L20"},"def":{"name":"to_big_f","return_type":"BigFloat","visibility":"Public","body":"amount.to_big_f"}}]},{"html_id":"money/Money/Constructors","path":"Money/Constructors.html","kind":"module","full_name":"Money::Constructors","name":"Constructors","abstract":false,"locations":[{"filename":"src/money/money/constructors.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"bitcoin(cents,bank=nil)-instance-method","name":"bitcoin","doc":"Creates a new `Money` object of the given value, using the\nBitcoin cryptocurrency.\n\n```\nMoney.bitcoin(100) # => Money(@amount=0.000001 @currency=\"BTC\")\n```","summary":"<p>Creates a new <code><a href=\"../Money.html\">Money</a></code> object of the given value, using the Bitcoin cryptocurrency.</p>","abstract":false,"args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(cents, bank = nil)","args_html":"(cents, bank = <span class=\"n\">nil</span>)","location":{"filename":"src/money/money/constructors.cr","line_number":52,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L52"},"def":{"name":"bitcoin","args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"visibility":"Public","body":"new(cents, \"BTC\", bank)"}},{"html_id":"euro(cents,bank=nil)-instance-method","name":"euro","doc":"Creates a new `Money` object of the given value, using the\nEuro currency.\n\n```\nMoney.euro(100) # => Money(@amount=1 @currency=\"EUR\")\n```","summary":"<p>Creates a new <code><a href=\"../Money.html\">Money</a></code> object of the given value, using the Euro currency.</p>","abstract":false,"args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(cents, bank = nil)","args_html":"(cents, bank = <span class=\"n\">nil</span>)","location":{"filename":"src/money/money/constructors.cr","line_number":42,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L42"},"def":{"name":"euro","args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"visibility":"Public","body":"new(cents, \"EUR\", bank)"}},{"html_id":"from_amount(amount:Number|String,currency=default_currency,bank=nil):Money-instance-method","name":"from_amount","doc":"Creates a new `Money` object of value given in the *unit* of the given\n*currency*.\n\n```\nMoney.from_amount(23.45, \"USD\") # => Money(@amount=23.45 @currency=\"USD\")\nMoney.from_amount(23.45, \"JPY\") # => Money(@amount=23 @currency=\"JPY\")\n```\n\nSee `#initialize`.","summary":"<p>Creates a new <code><a href=\"../Money.html\">Money</a></code> object of value given in the <em>unit</em> of the given <em>currency</em>.</p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Number | String"},{"name":"currency","default_value":"default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(amount : Number | String, currency = default_currency, bank = nil) : Money","args_html":"(amount : Number | String, currency = default_currency, bank = <span class=\"n\">nil</span>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/constructors.cr","line_number":12,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L12"},"def":{"name":"from_amount","args":[{"name":"amount","external_name":"amount","restriction":"Number | String"},{"name":"currency","default_value":"default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"return_type":"Money","visibility":"Public","body":"new(amount.to_big_d, currency, bank)"}},{"html_id":"us_dollar(cents,bank=nil)-instance-method","name":"us_dollar","doc":"Creates a new `Money` object of the given value, using the\nAmerican dollar currency.\n\n```\nMoney.us_dollar(100) # => Money(@amount=1 @currency=\"USD\")\n```","summary":"<p>Creates a new <code><a href=\"../Money.html\">Money</a></code> object of the given value, using the American dollar currency.</p>","abstract":false,"args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(cents, bank = nil)","args_html":"(cents, bank = <span class=\"n\">nil</span>)","location":{"filename":"src/money/money/constructors.cr","line_number":32,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L32"},"def":{"name":"us_dollar","args":[{"name":"cents","external_name":"cents","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"visibility":"Public","body":"new(cents, \"USD\", bank)"}},{"html_id":"zero(currency=default_currency,bank=nil):Money-instance-method","name":"zero","doc":"Creates a new `Money` object with value `0`.\n\n```\nMoney.zero       # => Money(@amount=0)\nMoney.zero(:pln) # => Money(@amount=0 @currency=\"PLN\")\n```","summary":"<p>Creates a new <code><a href=\"../Money.html\">Money</a></code> object with value <code>0</code>.</p>","abstract":false,"args":[{"name":"currency","default_value":"default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(currency = default_currency, bank = nil) : Money","args_html":"(currency = default_currency, bank = <span class=\"n\">nil</span>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/constructors.cr","line_number":22,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/constructors.cr#L22"},"def":{"name":"zero","args":[{"name":"currency","default_value":"default_currency","external_name":"currency","restriction":""},{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"return_type":"Money","visibility":"Public","body":"new(0, currency, bank)"}}]},{"html_id":"money/Money/Currency","path":"Money/Currency.html","kind":"class","full_name":"Money::Currency","name":"Currency","abstract":false,"superclass":{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/currency.cr","line_number":10,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L10"},{"filename":"src/money/currency/enumeration.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L2"},{"filename":"src/money/currency/json.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/json.cr#L3"},{"filename":"src/money/currency/loader.cr","line_number":4,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/loader.cr#L4"},{"filename":"src/money/currency/rate.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L1"},{"filename":"src/money/currency/rate_store.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L1"},{"filename":"src/money/currency/rate_store/memory.cr","line_number":1,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store/memory.cr#L1"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"extended_modules":[{"html_id":"money/Money/Currency/Enumeration","kind":"module","full_name":"Money::Currency::Enumeration","name":"Enumeration"},{"html_id":"money/Money/Currency/Loader","kind":"module","full_name":"Money::Currency::Loader","name":"Loader"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"doc":"Represents a specific currency unit.\n\nSee [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).","summary":"<p>Represents a specific currency unit.</p>","class_methods":[{"html_id":"register(currency:Currency)-class-method","name":"register","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"Currency"}],"args_string":"(currency : Currency)","args_html":"(currency : <a href=\"../Money/Currency.html\">Currency</a>)","location":{"filename":"src/money/currency.cr","line_number":40,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L40"},"def":{"name":"register","args":[{"name":"currency","external_name":"currency","restriction":"Currency"}],"visibility":"Public","body":"table[currency.id] = currency"}},{"html_id":"table:Hash(String,Currency)-class-method","name":"table","doc":"List of known currencies.","summary":"<p>List of known currencies.</p>","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":18,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L18"},"def":{"name":"table","return_type":"Hash(String, Currency)","visibility":"Public","body":"if (value = @@table).nil?\n  @@table = (load_currencies)\nelse\n  value\nend"}},{"html_id":"unregister(currency:Currency)-class-method","name":"unregister","abstract":false,"args":[{"name":"currency","external_name":"currency","restriction":"Currency"}],"args_string":"(currency : Currency)","args_html":"(currency : <a href=\"../Money/Currency.html\">Currency</a>)","location":{"filename":"src/money/currency.cr","line_number":44,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L44"},"def":{"name":"unregister","args":[{"name":"currency","external_name":"currency","restriction":"Currency"}],"visibility":"Public","body":"table.delete(currency.id)"}},{"html_id":"unregister(currency_code:String|Symbol)-class-method","name":"unregister","abstract":false,"args":[{"name":"currency_code","external_name":"currency_code","restriction":"String | Symbol"}],"args_string":"(currency_code : String | Symbol)","args_html":"(currency_code : String | Symbol)","location":{"filename":"src/money/currency.cr","line_number":48,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L48"},"def":{"name":"unregister","args":[{"name":"currency_code","external_name":"currency_code","restriction":"String | Symbol"}],"visibility":"Public","body":"(find?(currency_code)).try do |currency|\n  table.delete(currency.id)\nend"}},{"html_id":"wrap?(value:String|Symbol|Currency):Currency|Nil-class-method","name":"wrap?","doc":"Wraps the *value* in a `Currency` object.\n\n```\nc1 = Money::Currency.find(:usd)\nMoney::Currency.wrap?(c1)    # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(\"usd\") # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(:usd)  # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(:foo)  # => nil\n```","summary":"<p>Wraps the <em>value</em> in a <code><a href=\"../Money/Currency.html\">Currency</a></code> object.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String | Symbol | Currency"}],"args_string":"(value : String | Symbol | Currency) : Currency | Nil","args_html":"(value : String | Symbol | <a href=\"../Money/Currency.html\">Currency</a>) : <a href=\"../Money/Currency.html\">Currency</a> | Nil","location":{"filename":"src/money/currency.cr","line_number":63,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L63"},"def":{"name":"wrap?","args":[{"name":"value","external_name":"value","restriction":"String | Symbol | Currency"}],"return_type":"Currency | ::Nil","visibility":"Public","body":"case value\nwhen String, Symbol\n  find?(value)\nwhen Currency\n  value\nend"}}],"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/money/currency/json.cr","line_number":6,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/json.cr#L6"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"case pull.kind\nwhen .string?\n  find(pull.read_string)\nelse\n  previous_def(pull)\nend"}},{"html_id":"new(*,priority:Int32|Nil=nil,iso_numeric:UInt32|Nil=nil,code:String,name:Nil|String=nil,symbol:Nil|String=nil,disambiguate_symbol:Nil|String=nil,alternate_symbols:Nil|Array(String)=nil,subunit:Nil|String=nil,subunit_to_unit:UInt64,symbol_first:Bool|Nil=nil,html_entity:Nil|String=nil,decimal_mark:Nil|String=nil,thousands_separator:Nil|String=nil,smallest_denomination:UInt32|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"priority","default_value":"nil","external_name":"priority","restriction":"::Int32 | ::Nil"},{"name":"iso_numeric","default_value":"nil","external_name":"iso_numeric","restriction":"::UInt32 | ::Nil"},{"name":"code","external_name":"code","restriction":"::String"},{"name":"name","default_value":"nil","external_name":"name","restriction":"::Nil | ::String"},{"name":"symbol","default_value":"nil","external_name":"symbol","restriction":"::Nil | ::String"},{"name":"disambiguate_symbol","default_value":"nil","external_name":"disambiguate_symbol","restriction":"::Nil | ::String"},{"name":"alternate_symbols","default_value":"nil","external_name":"alternate_symbols","restriction":"::Nil | ::Array(::String)"},{"name":"subunit","default_value":"nil","external_name":"subunit","restriction":"::Nil | ::String"},{"name":"subunit_to_unit","external_name":"subunit_to_unit","restriction":"::UInt64"},{"name":"symbol_first","default_value":"nil","external_name":"symbol_first","restriction":"::Bool | ::Nil"},{"name":"html_entity","default_value":"nil","external_name":"html_entity","restriction":"::Nil | ::String"},{"name":"decimal_mark","default_value":"nil","external_name":"decimal_mark","restriction":"::Nil | ::String"},{"name":"thousands_separator","default_value":"nil","external_name":"thousands_separator","restriction":"::Nil | ::String"},{"name":"smallest_denomination","default_value":"nil","external_name":"smallest_denomination","restriction":"::UInt32 | ::Nil"}],"args_string":"(*, priority : Int32 | Nil = nil, iso_numeric : UInt32 | Nil = nil, code : String, name : Nil | String = nil, symbol : Nil | String = nil, disambiguate_symbol : Nil | String = nil, alternate_symbols : Nil | Array(String) = nil, subunit : Nil | String = nil, subunit_to_unit : UInt64, symbol_first : Bool | Nil = nil, html_entity : Nil | String = nil, decimal_mark : Nil | String = nil, thousands_separator : Nil | String = nil, smallest_denomination : UInt32 | Nil = nil)","args_html":"(*, priority : Int32 | Nil = <span class=\"n\">nil</span>, iso_numeric : UInt32 | Nil = <span class=\"n\">nil</span>, code : String, name : Nil | String = <span class=\"n\">nil</span>, symbol : Nil | String = <span class=\"n\">nil</span>, disambiguate_symbol : Nil | String = <span class=\"n\">nil</span>, alternate_symbols : Nil | Array(String) = <span class=\"n\">nil</span>, subunit : Nil | String = <span class=\"n\">nil</span>, subunit_to_unit : UInt64, symbol_first : Bool | Nil = <span class=\"n\">nil</span>, html_entity : Nil | String = <span class=\"n\">nil</span>, decimal_mark : Nil | String = <span class=\"n\">nil</span>, thousands_separator : Nil | String = <span class=\"n\">nil</span>, smallest_denomination : UInt32 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/money/currency.cr","line_number":75,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L75"},"def":{"name":"new","args":[{"name":"","external_name":"","restriction":""},{"name":"priority","default_value":"nil","external_name":"priority","restriction":"::Int32 | ::Nil"},{"name":"iso_numeric","default_value":"nil","external_name":"iso_numeric","restriction":"::UInt32 | ::Nil"},{"name":"code","external_name":"code","restriction":"::String"},{"name":"name","default_value":"nil","external_name":"name","restriction":"::Nil | ::String"},{"name":"symbol","default_value":"nil","external_name":"symbol","restriction":"::Nil | ::String"},{"name":"disambiguate_symbol","default_value":"nil","external_name":"disambiguate_symbol","restriction":"::Nil | ::String"},{"name":"alternate_symbols","default_value":"nil","external_name":"alternate_symbols","restriction":"::Nil | ::Array(::String)"},{"name":"subunit","default_value":"nil","external_name":"subunit","restriction":"::Nil | ::String"},{"name":"subunit_to_unit","external_name":"subunit_to_unit","restriction":"::UInt64"},{"name":"symbol_first","default_value":"nil","external_name":"symbol_first","restriction":"::Bool | ::Nil"},{"name":"html_entity","default_value":"nil","external_name":"html_entity","restriction":"::Nil | ::String"},{"name":"decimal_mark","default_value":"nil","external_name":"decimal_mark","restriction":"::Nil | ::String"},{"name":"thousands_separator","default_value":"nil","external_name":"thousands_separator","restriction":"::Nil | ::String"},{"name":"smallest_denomination","default_value":"nil","external_name":"smallest_denomination","restriction":"::UInt32 | ::Nil"}],"splat_index":0,"visibility":"Public","body":"_ = allocate\n_.initialize(priority: priority, iso_numeric: iso_numeric, code: code, name: name, symbol: symbol, disambiguate_symbol: disambiguate_symbol, alternate_symbols: alternate_symbols, subunit: subunit, subunit_to_unit: subunit_to_unit, symbol_first: symbol_first, html_entity: html_entity, decimal_mark: decimal_mark, thousands_separator: thousands_separator, smallest_denomination: smallest_denomination)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"wrap(value:String|Symbol|Currency):Currency-class-method","name":"wrap","doc":"Wraps the *value* in a `Currency` object.\n\n```\nc1 = Money::Currency.find(:usd)\nMoney::Currency.wrap?(c1)    # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(\"usd\") # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(:usd)  # => #<Money::Currency @id=\"usd\">\nMoney::Currency.wrap?(:foo)  # => nil\n```","summary":"<p>Wraps the <em>value</em> in a <code><a href=\"../Money/Currency.html\">Currency</a></code> object.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"String | Symbol | Currency"}],"args_string":"(value : String | Symbol | Currency) : Currency","args_html":"(value : String | Symbol | <a href=\"../Money/Currency.html\">Currency</a>) : <a href=\"../Money/Currency.html\">Currency</a>","location":{"filename":"src/money/currency.cr","line_number":71,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L71"},"def":{"name":"wrap","args":[{"name":"value","external_name":"value","restriction":"String | Symbol | Currency"}],"return_type":"Currency","visibility":"Public","body":"(wrap?(value)) || (raise(UnknownCurrencyError.new(\"Can't find currency: #{value}\")))"}}],"instance_methods":[{"html_id":"<=>(other:Currency):Int32-instance-method","name":"<=>","doc":"Compares `self` with *other* currency against the value of\n`priority` and `id` attributes.","summary":"<p>Compares <code>self</code> with <em>other</em> currency against the value of <code><a href=\"../Money/Currency.html#priority%3AInt32%7CNil-instance-method\">#priority</a></code> and <code><a href=\"../Money/Currency.html#id%3AString-instance-method\">#id</a></code> attributes.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Currency"}],"args_string":"(other : Currency) : Int32","args_html":"(other : <a href=\"../Money/Currency.html\">Currency</a>) : Int32","location":{"filename":"src/money/currency.cr","line_number":101,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L101"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Currency"}],"return_type":"Int32","visibility":"Public","body":"case {(priority = self.priority), (other_priority = other.priority)}\nin {Int32, Int32}\n  comparison = priority <=> other_priority\n  if comparison.zero?\n    comparison = id <=> other.id\n  end\n  comparison\nin {Int32, nil}\n  -1\nin {nil, Int32}\n  1\nin {nil, nil}\n  id <=> other.id\nend"}},{"html_id":"<=>(other:String|Symbol):Int32-instance-method","name":"<=>","doc":"Compares `self` with *other* currency against the value of id` attribute.","summary":"<p>Compares <code>self</code> with <em>other</em> currency against the value of id` attribute.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"String | Symbol"}],"args_string":"(other : String | Symbol) : Int32","args_html":"(other : String | Symbol) : Int32","location":{"filename":"src/money/currency.cr","line_number":115,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L115"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"String | Symbol"}],"return_type":"Int32","visibility":"Public","body":"id.compare(other.to_s, case_insensitive: true)"}},{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"alternate_symbols:Array(String)|Nil-instance-method","name":"alternate_symbols","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":26,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L26"},"def":{"name":"alternate_symbols","return_type":"Array(String) | ::Nil","visibility":"Public","body":"@alternate_symbols"}},{"html_id":"code:String-instance-method","name":"code","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":22,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L22"},"def":{"name":"code","return_type":"String","visibility":"Public","body":"@code"}},{"html_id":"decimal_mark:String|Nil-instance-method","name":"decimal_mark","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":31,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L31"},"def":{"name":"decimal_mark","return_type":"String | ::Nil","visibility":"Public","body":"@decimal_mark"}},{"html_id":"decimal_places:Int32-instance-method","name":"decimal_places","doc":"Alias of `#exponent`.","summary":"<p>Alias of <code><a href=\"../Money/Currency.html#exponent%3AInt32-instance-method\">#exponent</a></code>.</p>","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":88,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L88"},"def":{"name":"decimal_places","return_type":"Int32","visibility":"Public","body":"exponent"}},{"html_id":"disambiguate_symbol:String|Nil-instance-method","name":"disambiguate_symbol","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":25,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L25"},"def":{"name":"disambiguate_symbol","return_type":"String | ::Nil","visibility":"Public","body":"@disambiguate_symbol"}},{"html_id":"exponent:Int32-instance-method","name":"exponent","doc":"Returns the relation between subunit and unit as a base 10 exponent.\n\nNOTE: MGA and MRU are exceptions and are rounded to 1.\n\nSee [Active_codes](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).","summary":"<p>Returns the relation between subunit and unit as a base 10 exponent.</p>","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":83,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L83"},"def":{"name":"exponent","return_type":"Int32","visibility":"Public","body":"(Math.log10(subunit_to_unit)).round.to_i"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = id.hash(hasher)\nhasher\n"}},{"html_id":"html_entity:String|Nil-instance-method","name":"html_entity","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":30,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L30"},"def":{"name":"html_entity","return_type":"String | ::Nil","visibility":"Public","body":"@html_entity"}},{"html_id":"id:String-instance-method","name":"id","doc":"Currency ID, for time being lower-cased `#code`.","summary":"<p>Currency ID, for time being lower-cased <code><a href=\"../Money/Currency.html#code%3AString-instance-method\">#code</a></code>.</p>","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":36,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L36"},"def":{"name":"id","return_type":"String","visibility":"Public","body":"if (value = @id).nil?\n  @id = (code.downcase)\nelse\n  value\nend"}},{"html_id":"iso?-instance-method","name":"iso?","doc":"Returns `true` if iso currency.\n\nSee `#iso_numeric`.","summary":"<p>Returns <code>true</code> if iso currency.</p>","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":95,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L95"},"def":{"name":"iso?","visibility":"Public","body":"!(!iso_numeric)"}},{"html_id":"iso_numeric:UInt32|Nil-instance-method","name":"iso_numeric","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":21,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L21"},"def":{"name":"iso_numeric","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@iso_numeric"}},{"html_id":"name:String|Nil-instance-method","name":"name","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":23,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L23"},"def":{"name":"name","return_type":"String | ::Nil","visibility":"Public","body":"@name"}},{"html_id":"priority:Int32|Nil-instance-method","name":"priority","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":20,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L20"},"def":{"name":"priority","return_type":"Int32 | ::Nil","visibility":"Public","body":"@priority"}},{"html_id":"smallest_denomination:UInt32|Nil-instance-method","name":"smallest_denomination","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":33,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L33"},"def":{"name":"smallest_denomination","return_type":"UInt32 | ::Nil","visibility":"Public","body":"@smallest_denomination"}},{"html_id":"subunit:String|Nil-instance-method","name":"subunit","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":27,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L27"},"def":{"name":"subunit","return_type":"String | ::Nil","visibility":"Public","body":"@subunit"}},{"html_id":"subunit_to_unit:UInt64-instance-method","name":"subunit_to_unit","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":28,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L28"},"def":{"name":"subunit_to_unit","return_type":"UInt64","visibility":"Public","body":"@subunit_to_unit"}},{"html_id":"symbol:String|Nil-instance-method","name":"symbol","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":24,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L24"},"def":{"name":"symbol","return_type":"String | ::Nil","visibility":"Public","body":"@symbol"}},{"html_id":"symbol_first?:Bool|Nil-instance-method","name":"symbol_first?","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":29,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L29"},"def":{"name":"symbol_first?","return_type":"Bool | ::Nil","visibility":"Public","body":"@symbol_first"}},{"html_id":"thousands_separator:String|Nil-instance-method","name":"thousands_separator","abstract":false,"location":{"filename":"src/money/currency.cr","line_number":32,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L32"},"def":{"name":"thousands_separator","return_type":"String | ::Nil","visibility":"Public","body":"@thousands_separator"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a string representation corresponding to the `#code` property\nto the given *io*.\n\n```\nMoney::Currency.find(:usd).to_s # => \"USD\"\nMoney::Currency.find(:eur).to_s # => \"EUR\"\n```","summary":"<p>Appends a string representation corresponding to the <code><a href=\"../Money/Currency.html#code%3AString-instance-method\">#code</a></code> property to the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/money/currency.cr","line_number":126,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency.cr#L126"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << code"}}],"types":[{"html_id":"money/Money/Currency/Enumeration","path":"Money/Currency/Enumeration.html","kind":"module","full_name":"Money::Currency::Enumeration","name":"Enumeration","abstract":false,"ancestors":[{"html_id":"money/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"locations":[{"filename":"src/money/currency/enumeration.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L3"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"money/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"money/Money/Currency","kind":"class","full_name":"Money::Currency","name":"Currency"},"instance_methods":[{"html_id":"[](key:String|Symbol):Currency-instance-method","name":"[]","doc":"Lookup a currency with given *key* an returns a `Currency` instance on\nsuccess, raises `UnknownCurrencyError` otherwise.\n\n```\nMoney::Currency.find(\"EUR\") # => #<Money::Currency @id=\"eur\">\nMoney::Currency.find(\"FOO\") # => raises UnknownCurrencyError\n```","summary":"<p>Lookup a currency with given <em>key</em> an returns a <code><a href=\"../../Money/Currency.html\">Currency</a></code> instance on success, raises <code><a href=\"../../Money/UnknownCurrencyError.html\">UnknownCurrencyError</a></code> otherwise.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : Currency","args_html":"(key : String | Symbol) : <a href=\"../../Money/Currency.html\">Currency</a>","location":{"filename":"src/money/currency/enumeration.cr","line_number":34,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L34"},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"return_type":"Currency","visibility":"Public","body":"find(key)"}},{"html_id":"[]?(key:String|Symbol):Currency|Nil-instance-method","name":"[]?","doc":"Lookup a currency with given *key* an returns a `Currency` instance on\nsuccess, `nil` otherwise.\n\n```\nMoney::Currency.find(\"EUR\") # => #<Money::Currency @id=\"eur\">\nMoney::Currency.find(\"FOO\") # => nil\n```","summary":"<p>Lookup a currency with given <em>key</em> an returns a <code><a href=\"../../Money/Currency.html\">Currency</a></code> instance on success, <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : Currency | Nil","args_html":"(key : String | Symbol) : <a href=\"../../Money/Currency.html\">Currency</a> | Nil","location":{"filename":"src/money/currency/enumeration.cr","line_number":18,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L18"},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"return_type":"Currency | ::Nil","visibility":"Public","body":"find?(key)"}},{"html_id":"all:Array(Currency)-instance-method","name":"all","abstract":false,"location":{"filename":"src/money/currency/enumeration.cr","line_number":38,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L38"},"def":{"name":"all","return_type":"Array(Currency)","visibility":"Public","body":"table.values.sort!"}},{"html_id":"each(&):Nil-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"location":{"filename":"src/money/currency/enumeration.cr","line_number":42,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L42"},"def":{"name":"each","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"all.each do |*args|\n  yield *args\nend"}},{"html_id":"find(key:String|Symbol):Currency-instance-method","name":"find","doc":"Lookup a currency with given *key* an returns a `Currency` instance on\nsuccess, raises `UnknownCurrencyError` otherwise.\n\n```\nMoney::Currency.find(\"EUR\") # => #<Money::Currency @id=\"eur\">\nMoney::Currency.find(\"FOO\") # => raises UnknownCurrencyError\n```","summary":"<p>Lookup a currency with given <em>key</em> an returns a <code><a href=\"../../Money/Currency.html\">Currency</a></code> instance on success, raises <code><a href=\"../../Money/UnknownCurrencyError.html\">UnknownCurrencyError</a></code> otherwise.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : Currency","args_html":"(key : String | Symbol) : <a href=\"../../Money/Currency.html\">Currency</a>","location":{"filename":"src/money/currency/enumeration.cr","line_number":29,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L29"},"def":{"name":"find","args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"return_type":"Currency","visibility":"Public","body":"(find?(key)) || (raise(UnknownCurrencyError.new(\"Can't find currency: #{key}\")))"}},{"html_id":"find?(key:String|Symbol):Currency|Nil-instance-method","name":"find?","doc":"Lookup a currency with given *key* an returns a `Currency` instance on\nsuccess, `nil` otherwise.\n\n```\nMoney::Currency.find(\"EUR\") # => #<Money::Currency @id=\"eur\">\nMoney::Currency.find(\"FOO\") # => nil\n```","summary":"<p>Lookup a currency with given <em>key</em> an returns a <code><a href=\"../../Money/Currency.html\">Currency</a></code> instance on success, <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : Currency | Nil","args_html":"(key : String | Symbol) : <a href=\"../../Money/Currency.html\">Currency</a> | Nil","location":{"filename":"src/money/currency/enumeration.cr","line_number":13,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/enumeration.cr#L13"},"def":{"name":"find?","args":[{"name":"key","external_name":"key","restriction":"String | Symbol"}],"return_type":"Currency | ::Nil","visibility":"Public","body":"table[key.to_s.downcase]?"}}]},{"html_id":"money/Money/Currency/Loader","path":"Money/Currency/Loader.html","kind":"module","full_name":"Money::Currency::Loader","name":"Loader","abstract":false,"locations":[{"filename":"src/money/currency/loader.cr","line_number":5,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/loader.cr#L5"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DATA_PATH","name":"DATA_PATH","value":"File.expand_path(\"../../../../data/currencies\", \"/home/runner/work/money/money/src/money/currency/loader.cr\")"}],"namespace":{"html_id":"money/Money/Currency","kind":"class","full_name":"Money::Currency","name":"Currency"},"instance_methods":[{"html_id":"load_currencies-instance-method","name":"load_currencies","doc":"Loads and returns the currencies stored in JSON files\ninside of `data/currencies` directory.","summary":"<p>Loads and returns the currencies stored in JSON files inside of <code>data/currencies</code> directory.</p>","abstract":false,"location":{"filename":"src/money/currency/loader.cr","line_number":10,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/loader.cr#L10"},"def":{"name":"load_currencies","visibility":"Public","body":"currency_table = {} of String => Currency\nDir.each_child(DATA_PATH) do |filename|\n  (parse_currency_file(filename)).try do |currency|\n    currency_table[currency.id] = currency\n  end\nend\ncurrency_table\n"}}]},{"html_id":"money/Money/Currency/Rate","path":"Money/Currency/Rate.html","kind":"struct","full_name":"Money::Currency::Rate","name":"Rate","abstract":false,"superclass":{"html_id":"money/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"money/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"money/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/currency/json.cr","line_number":15,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/json.cr#L15"},{"filename":"src/money/currency/rate.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"money/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"}],"namespace":{"html_id":"money/Money/Currency","kind":"class","full_name":"Money::Currency","name":"Currency"},"constructors":[{"html_id":"new(from:Currency,to:Currency,value:Int64)-class-method","name":"new","abstract":false,"args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"},{"name":"value","external_name":"value","restriction":"Int64"}],"args_string":"(from : Currency, to : Currency, value : Int64)","args_html":"(from : <a href=\"../../Money/Currency.html\">Currency</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>, value : Int64)","location":{"filename":"src/money/currency/rate.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L2"},"def":{"name":"new","args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"},{"name":"value","external_name":"value","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(from, to, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/money/currency/json.cr","line_number":16,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/json.cr#L16"},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/money/currency/rate.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L2"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@from.clone, @to.clone, @value.clone)"}},{"html_id":"copy_with(from_from=@from,to_to=@to,value_value=@value)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_from","default_value":"@from","external_name":"from","restriction":""},{"name":"_to","default_value":"@to","external_name":"to","restriction":""},{"name":"_value","default_value":"@value","external_name":"value","restriction":""}],"args_string":"(from _from = @from, to _to = @to, value _value = @value)","args_html":"(from _from = @from, to _to = @to, value _value = @value)","location":{"filename":"src/money/currency/rate.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L2"},"def":{"name":"copy_with","args":[{"name":"_from","default_value":"@from","external_name":"from","restriction":""},{"name":"_to","default_value":"@to","external_name":"to","restriction":""},{"name":"_value","default_value":"@value","external_name":"value","restriction":""}],"visibility":"Public","body":"self.class.new(_from, _to, _value)"}},{"html_id":"from:Currency-instance-method","name":"from","abstract":false,"def":{"name":"from","return_type":"Currency","visibility":"Public","body":"@from"}},{"html_id":"to:Currency-instance-method","name":"to","abstract":false,"def":{"name":"to","return_type":"Currency","visibility":"Public","body":"@to"}},{"html_id":"to_big_d:BigDecimal-instance-method","name":"to_big_d","doc":"Returns conversion rate `value` as `BigDecimal` object.","summary":"<p>Returns conversion rate <code><a href=\"../../Money/Currency/Rate.html#value%3AInt64-instance-method\">#value</a></code> as <code><a href=\"../../BigDecimal.html\">BigDecimal</a></code> object.</p>","abstract":false,"location":{"filename":"src/money/currency/rate.cr","line_number":14,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L14"},"def":{"name":"to_big_d","return_type":"BigDecimal","visibility":"Public","body":"BigDecimal.new(@value, @to.exponent)"}},{"html_id":"to_f64:Float64-instance-method","name":"to_f64","doc":"Returns conversion rate `value` as `Float64`.","summary":"<p>Returns conversion rate <code><a href=\"../../Money/Currency/Rate.html#value%3AInt64-instance-method\">#value</a></code> as <code>Float64</code>.</p>","abstract":false,"location":{"filename":"src/money/currency/rate.cr","line_number":9,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L9"},"def":{"name":"to_f64","return_type":"Float64","visibility":"Public","body":"to_big_d.to_f"}},{"html_id":"to_i64:Int64-instance-method","name":"to_i64","abstract":false,"location":{"filename":"src/money/currency/rate.cr","line_number":4,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L4"},"def":{"name":"to_i64","return_type":"Int64","visibility":"Public","body":"@value"}},{"html_id":"to_json(json:JSON::Builder)-instance-method","name":"to_json","abstract":false,"args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"args_string":"(json : JSON::Builder)","args_html":"(json : JSON::Builder)","location":{"filename":"src/money/currency/json.cr","line_number":18,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/json.cr#L18"},"def":{"name":"to_json","args":[{"name":"json","external_name":"json","restriction":"JSON::Builder"}],"visibility":"Public","body":"json.object do\n  json.field(\"from\", @from.to_s)\n  json.field(\"to\", @to.to_s)\n  json.field(\"value\", @value)\nend"}},{"html_id":"to_money(bank=nil):Money-instance-method","name":"to_money","doc":"Returns conversion rate `value` as `Money` object.","summary":"<p>Returns conversion rate <code><a href=\"../../Money/Currency/Rate.html#value%3AInt64-instance-method\">#value</a></code> as <code><a href=\"../../Money.html\">Money</a></code> object.</p>","abstract":false,"args":[{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"args_string":"(bank = nil) : Money","args_html":"(bank = <span class=\"n\">nil</span>) : <a href=\"../../Money.html\">Money</a>","location":{"filename":"src/money/currency/rate.cr","line_number":19,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L19"},"def":{"name":"to_money","args":[{"name":"bank","default_value":"nil","external_name":"bank","restriction":""}],"return_type":"Money","visibility":"Public","body":"Money.new(@value, @to, bank)"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/money/currency/rate.cr","line_number":23,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate.cr#L23"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"((((io << @from) << \" -> \") << @to) << \": \") << to_big_d"}},{"html_id":"value:Int64-instance-method","name":"value","abstract":false,"def":{"name":"value","return_type":"Int64","visibility":"Public","body":"@value"}}]},{"html_id":"money/Money/Currency/RateStore","path":"Money/Currency/RateStore.html","kind":"class","full_name":"Money::Currency::RateStore","name":"RateStore","abstract":true,"superclass":{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"money/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/currency/rate_store.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"money/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"subclasses":[{"html_id":"money/Money/Currency/RateStore/Memory","kind":"class","full_name":"Money::Currency::RateStore::Memory","name":"Memory"}],"namespace":{"html_id":"money/Money/Currency","kind":"class","full_name":"Money::Currency","name":"Currency"},"instance_methods":[{"html_id":"[](from,to):BigDecimal-instance-method","name":"[]","doc":"Retrieve the rate for the given currencies.\nNOTE: Uses `transaction` to synchronize data access.\n\n```\nstore = Money::Currency::RateStore::Memory.new\nstore[\"USD\", \"CAD\"] = 1.24515\nstore[\"USD\", \"CAD\"]? # => 1.24515\n```","summary":"<p>Retrieve the rate for the given currencies.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""}],"args_string":"(from, to) : BigDecimal","args_html":"(from, to) : <a href=\"../../BigDecimal.html\">BigDecimal</a>","location":{"filename":"src/money/currency/rate_store.cr","line_number":42,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L42"},"def":{"name":"[]","args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""}],"return_type":"BigDecimal","visibility":"Public","body":"from, to = Currency.wrap(from), Currency.wrap(to)\nself[from, to]? || (raise(UnknownRateError.new(\"No conversion rate known for #{from} -> #{to}\")))\n"}},{"html_id":"[]=(from,to,value:Number):Nil-instance-method","name":"[]=","doc":"Registers a conversion rate and returns it.\nNOTE: Uses `transaction` to synchronize data access.\n\n```\nstore = Money::Currency::RateStore::Memory.new\nstore[\"USD\", \"CAD\"] = 1.24515\nstore[\"CAD\", \"USD\"] = 0.803115\n```","summary":"<p>Registers a conversion rate and returns it.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""},{"name":"value","external_name":"value","restriction":"Number"}],"args_string":"(from, to, value : Number) : Nil","args_html":"(from, to, value : Number) : Nil","location":{"filename":"src/money/currency/rate_store.cr","line_number":19,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L19"},"def":{"name":"[]=","args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""},{"name":"value","external_name":"value","restriction":"Number"}],"return_type":"Nil","visibility":"Public","body":"from, to = Currency.wrap(from), Currency.wrap(to)\nvalue = (value.to_big_d * to.subunit_to_unit).round\ntransaction do\n  add_rate(from, to, value.to_i64)\nend\n"}},{"html_id":"[]?(from,to):BigDecimal|Nil-instance-method","name":"[]?","doc":"Retrieve the rate for the given currencies.\nNOTE: Uses `transaction` to synchronize data access.\n\n```\nstore = Money::Currency::RateStore::Memory.new\nstore[\"USD\", \"CAD\"] = 1.24515\nstore[\"USD\", \"CAD\"]? # => 1.24515\n```","summary":"<p>Retrieve the rate for the given currencies.</p>","abstract":false,"args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""}],"args_string":"(from, to) : BigDecimal | Nil","args_html":"(from, to) : <a href=\"../../BigDecimal.html\">BigDecimal</a> | Nil","location":{"filename":"src/money/currency/rate_store.cr","line_number":36,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L36"},"def":{"name":"[]?","args":[{"name":"from","external_name":"from","restriction":""},{"name":"to","external_name":"to","restriction":""}],"return_type":"BigDecimal | ::Nil","visibility":"Public","body":"from, to = Currency.wrap(from), Currency.wrap(to)\ntransaction do\n  (get_rate?(from, to)).try(&.to_big_d)\nend\n"}},{"html_id":"add_rate(from:Currency,to:Currency,value:Int64):Nil-instance-method","name":"add_rate","doc":"See `#[]=`.","summary":"<p>See <code><a href=\"../../Money/Currency/RateStore.html#%5B%5D%3D%28from%2Cto%2Cvalue%3ANumber%29%3ANil-instance-method\">#[]=</a></code>.</p>","abstract":true,"args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"},{"name":"value","external_name":"value","restriction":"Int64"}],"args_string":"(from : Currency, to : Currency, value : Int64) : Nil","args_html":"(from : <a href=\"../../Money/Currency.html\">Currency</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>, value : Int64) : Nil","location":{"filename":"src/money/currency/rate_store.cr","line_number":9,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L9"},"def":{"name":"add_rate","args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"},{"name":"value","external_name":"value","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"clear:Nil-instance-method","name":"clear","doc":"Empties currency rate index.\nNOTE: Uses `transaction` to synchronize data access.","summary":"<p>Empties currency rate index.</p>","abstract":false,"location":{"filename":"src/money/currency/rate_store.cr","line_number":61,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L61"},"def":{"name":"clear","return_type":"Nil","visibility":"Public","body":"transaction do\n  clear_rates\nend"}},{"html_id":"clear_rates:Nil-instance-method","name":"clear_rates","doc":"See `#clear`.","summary":"<p>See <code><a href=\"../../Money/Currency/RateStore.html#clear%3ANil-instance-method\">#clear</a></code>.</p>","abstract":true,"location":{"filename":"src/money/currency/rate_store.cr","line_number":57,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L57"},"def":{"name":"clear_rates","return_type":"Nil","visibility":"Public","body":""}},{"html_id":"each(&block:T->_)-instance-method","name":"each","doc":"Iterates over list of `Rate` objects.\n\n```\nstore.each do |rate|\n  puts rate\nend\n```","summary":"<p>Iterates over list of <code><a href=\"../../Money/Currency/Rate.html\">Rate</a></code> objects.</p>","abstract":true,"location":{"filename":"src/money/currency/rate_store.cr","line_number":54,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L54"},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":""}},{"html_id":"get_rate?(from:Currency,to:Currency):Rate|Nil-instance-method","name":"get_rate?","doc":"See `#[]?`.","summary":"<p>See <code><a href=\"../../Money/Currency/RateStore.html#%5B%5D%3F%28from%2Cto%29%3ABigDecimal%7CNil-instance-method\">#[]?</a></code>.</p>","abstract":true,"args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"}],"args_string":"(from : Currency, to : Currency) : Rate | Nil","args_html":"(from : <a href=\"../../Money/Currency.html\">Currency</a>, to : <a href=\"../../Money/Currency.html\">Currency</a>) : <a href=\"../../Money/Currency/Rate.html\">Rate</a> | Nil","location":{"filename":"src/money/currency/rate_store.cr","line_number":26,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L26"},"def":{"name":"get_rate?","args":[{"name":"from","external_name":"from","restriction":"Currency"},{"name":"to","external_name":"to","restriction":"Currency"}],"return_type":"Rate | ::Nil","visibility":"Public","body":""}},{"html_id":"transaction(&block:->_)-instance-method","name":"transaction","doc":"Wraps block execution in a concurrency-safe transaction.","summary":"<p>Wraps block execution in a concurrency-safe transaction.</p>","abstract":true,"location":{"filename":"src/money/currency/rate_store.cr","line_number":6,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store.cr#L6"},"def":{"name":"transaction","yields":0,"block_arity":0,"block_arg":{"name":"block","external_name":"block","restriction":"(-> _)"},"visibility":"Public","body":""}}],"types":[{"html_id":"money/Money/Currency/RateStore/Memory","path":"Money/Currency/RateStore/Memory.html","kind":"class","full_name":"Money::Currency::RateStore::Memory","name":"Memory","abstract":false,"superclass":{"html_id":"money/Money/Currency/RateStore","kind":"class","full_name":"Money::Currency::RateStore","name":"RateStore"},"ancestors":[{"html_id":"money/Money/Currency/RateStore","kind":"class","full_name":"Money::Currency::RateStore","name":"RateStore"},{"html_id":"money/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/currency/rate_store/memory.cr","line_number":15,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store/memory.cr#L15"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"INDEX_KEY_SEPARATOR","name":"INDEX_KEY_SEPARATOR","value":"'_'"}],"namespace":{"html_id":"money/Money/Currency/RateStore","kind":"class","full_name":"Money::Currency::RateStore","name":"RateStore"},"doc":"Class for concurrency-safe storage of exchange rate pairs.\nUsed by instances of `Currency::VariableExchange`.\n\n```\nstore = Money::Currency::RateStore::Memory.new\nstore[\"USD\", \"CAD\"] = 0.98\nstore[\"USD\", \"CAD\"] # => 0.98\n\n# Iterates rates\nstore.each do |rate|\n  puts rate\nend\n```","summary":"<p>Class for concurrency-safe storage of exchange rate pairs.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Initializes a new `RateStore::Memory` object.","summary":"<p>Initializes a new <code><a href=\"../../../Money/Currency/RateStore/Memory.html\">RateStore::Memory</a></code> object.</p>","abstract":false,"location":{"filename":"src/money/currency/rate_store/memory.cr","line_number":19,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store/memory.cr#L19"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Iterates over list of `Rate` objects.\n\n```\nstore.each do |rate|\n  puts rate\nend\n```","summary":"<p>Iterates over list of <code><a href=\"../../../Money/Currency/Rate.html\">Rate</a></code> objects.</p>","abstract":false,"location":{"filename":"src/money/currency/rate_store/memory.cr","line_number":39,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store/memory.cr#L39"},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"@index.each do |_, rate|\n  yield rate\nend"}},{"html_id":"transaction(&:->_)-instance-method","name":"transaction","doc":"Wraps block execution in a thread-safe transaction.\nNOTE: Uses `Mutex` to synchronize data access.","summary":"<p>Wraps block execution in a thread-safe transaction.</p>","abstract":false,"location":{"filename":"src/money/currency/rate_store/memory.cr","line_number":27,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/currency/rate_store/memory.cr#L27"},"def":{"name":"transaction","yields":0,"block_arity":0,"block_arg":{"name":"","external_name":"","restriction":"(-> _)"},"visibility":"Public","body":"@mutex.synchronize do\n  yield\nend"}}]}]}]},{"html_id":"money/Money/DifferentCurrencyError","path":"Money/DifferentCurrencyError.html","kind":"class","full_name":"Money::DifferentCurrencyError","name":"DifferentCurrencyError","abstract":false,"superclass":{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},"ancestors":[{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/error.cr","line_number":12,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L12"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"doc":"Raised when trying to exchange currencies.","summary":"<p>Raised when trying to exchange currencies.</p>"},{"html_id":"money/Money/Error","path":"Money/Error.html","kind":"class","full_name":"Money::Error","name":"Error","abstract":false,"superclass":{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/error.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"money/Money/DifferentCurrencyError","kind":"class","full_name":"Money::DifferentCurrencyError","name":"DifferentCurrencyError"},{"html_id":"money/Money/Parse/Error","kind":"class","full_name":"Money::Parse::Error","name":"Error"},{"html_id":"money/Money/UndefinedSmallestDenominationError","kind":"class","full_name":"Money::UndefinedSmallestDenominationError","name":"UndefinedSmallestDenominationError"},{"html_id":"money/Money/UnknownCurrencyError","kind":"class","full_name":"Money::UnknownCurrencyError","name":"UnknownCurrencyError"},{"html_id":"money/Money/UnknownRateError","kind":"class","full_name":"Money::UnknownRateError","name":"UnknownRateError"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}},{"html_id":"money/Money/Exchange","path":"Money/Exchange.html","kind":"module","full_name":"Money::Exchange","name":"Exchange","abstract":false,"locations":[{"filename":"src/money/money/exchange.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/exchange.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"exchange_to(other_currency):Money-instance-method","name":"exchange_to","doc":"Exchanges `self` to a new `Money` object in *other_currency*.","summary":"<p>Exchanges <code>self</code> to a new <code><a href=\"../Money.html\">Money</a></code> object in <em>other_currency</em>.</p>","abstract":false,"args":[{"name":"other_currency","external_name":"other_currency","restriction":""}],"args_string":"(other_currency) : Money","args_html":"(other_currency) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/exchange.cr","line_number":4,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/exchange.cr#L4"},"def":{"name":"exchange_to","args":[{"name":"other_currency","external_name":"other_currency","restriction":""}],"return_type":"Money","visibility":"Public","body":"other_currency = Currency.wrap(other_currency)\nif currency == other_currency\n  self\nelse\n  bank.exchange(self, other_currency)\nend\n"}},{"html_id":"with_same_currency(other:Money,&)-instance-method","name":"with_same_currency","doc":"Yields *other* `Money` object exchanged to `self.currency`.","summary":"<p>Yields <em>other</em> <code><a href=\"../Money.html\">Money</a></code> object exchanged to <code>self.currency</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Money"}],"args_string":"(other : Money, &)","args_html":"(other : <a href=\"../Money.html\">Money</a>, &)","location":{"filename":"src/money/money/exchange.cr","line_number":14,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/exchange.cr#L14"},"def":{"name":"with_same_currency","args":[{"name":"other","external_name":"other","restriction":"Money"}],"yields":1,"block_arity":1,"visibility":"Public","body":"yield other.exchange_to(currency)"}}]},{"html_id":"money/Money/Formatting","path":"Money/Formatting.html","kind":"module","full_name":"Money::Formatting","name":"Formatting","abstract":false,"locations":[{"filename":"src/money/money/formatting.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/formatting.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"format(options:NamedTuple):String-instance-method","name":"format","doc":"Creates a formatted price string according to several rules.\n\n**display_free** (`Bool | String`) — default: `false`\n\nWhether a zero amount of money should be formatted as the supplied string.\n\n```\nMoney.us_dollar(0).format(display_free: \"gratis\") # => \"gratis\"\nMoney.us_dollar(0).format                         # => \"$0.00\"\n```\n\n**sign_positive** (`Bool`) — default: `false`\n\nWhether positive numbers should be signed, too.\n\n```\n# You can specify to display the sign with positive numbers\nMoney.new(100, \"GBP\").format(sign_positive: true) # => \"+£1.00\"\nMoney.new(100, \"GBP\").format                      # => \"£1.00\"\n```\n\n**with_currency** (`Bool`) — default: `false`\n\nWhether the currency name should be appended to the result string.\n\n```\nMoney.us_dollar(100).format                      # => \"$1.00\"\nMoney.us_dollar(100).format(with_currency: true) # => \"$1.00 USD\"\nMoney.us_dollar(85).format(with_currency: true)  # => \"$0.85 USD\"\n```\n\n**no_cents** (`Bool`) — default: `false`\n\nWhether cents should be omitted.\n\n```\nMoney.us_dollar(100).format(no_cents: true) # => \"$1\"\nMoney.us_dollar(599).format(no_cents: true) # => \"$5\"\n```\n\n**no_cents_if_whole** (`Bool`) — default: `false`\n\nWhether cents should be omitted if the cent value is zero.\n\n```\nMoney.us_dollar(10000).format(no_cents_if_whole: true) # => \"$100\"\nMoney.us_dollar(10034).format(no_cents_if_whole: true) # => \"$100.34\"\n```\n\n**drop_trailing_zeros** (`Bool`) — default: `false`\n\n```\nMoney.new(89000, :btc).format(drop_trailing_zeros: true) # => ฿0.00089\nMoney.new(110, :usd).format(drop_trailing_zeros: true)   # => $1.1\n```\n\n**symbol_first** (`Bool`) — default: `false`\n\nWhether a money symbol should go before the amount.\n\n```\nMoney.new(10000, \"USD\").format(symbol_first: true)  # => \"$100.00\"\nMoney.new(10000, \"USD\").format(symbol_first: false) # => \"100.00 $\"\n```\n\n**symbol** (`Bool | String`) — default: `true`\n\nWhether a money symbol should be prepended to the result string.\nThis method attempts to pick a symbol that's suitable for the given currency.\n\n```\nMoney.new(100, \"USD\") # => \"$1.00\"\nMoney.new(100, \"GBP\") # => \"£1.00\"\nMoney.new(100, \"EUR\") # => \"€1.00\"\n\n# Same thing.\nMoney.new(100, \"USD\").format(symbol: true) # => \"$1.00\"\nMoney.new(100, \"GBP\").format(symbol: true) # => \"£1.00\"\nMoney.new(100, \"EUR\").format(symbol: true) # => \"€1.00\"\n\n# You can pass `false` or an empty string to disable\n# prepending a money symbol.\nMoney.new(100, \"USD\").format(symbol: false) # => \"1.00\"\nMoney.new(100, \"GBP\").format(symbol: nil)   # => \"1.00\"\nMoney.new(100, \"EUR\").format(symbol: \"\")    # => \"1.00\"\n\n# If the symbol for the given currency isn't known, then it will default\n# to \"¤\" as symbol.\nMoney.new(100, \"XBC\").format(symbol: true) # => \"1.00 ¤\"\n\n# You can specify a string as value to enforce using a particular symbol.\nMoney.new(100, \"XBC\").format(symbol: \"ƒ\") # => \"1.00 ƒ\"\n```\n\n**disambiguate** (`Bool`) — default: `false`\n\nPrevents the result from being ambiguous due to equal symbols for different currencies.\nUses the `disambiguate_symbol`.\n\n```\nMoney.new(100, \"USD\").format(disambiguate: false) # => \"$100.00\"\nMoney.new(100, \"CAD\").format(disambiguate: false) # => \"$100.00\"\nMoney.new(100, \"USD\").format(disambiguate: true)  # => \"US$100.00\"\nMoney.new(100, \"CAD\").format(disambiguate: true)  # => \"C$100.00\"\n```\n\n**symbol_before_without_space** (`Bool`) — default: `true`\n\nWhether a space between the money symbol and the amount should be inserted\nwhen `:symbol_first` is `true`. The default is `true` (meaning no space).\nIgnored if `:symbol` is `false` or `:symbol_first` is `false`.\n\n```\n# Default is to not insert a space.\nMoney.new(100, \"USD\").format # => \"$1.00\"\n\n# Same thing.\nMoney.new(100, \"USD\").format(symbol_before_without_space: true) # => \"$1.00\"\n\n# If set to false, will insert a space.\nMoney.new(100, \"USD\").format(symbol_before_without_space: false) # => \"$ 1.00\"\n```\n\n**symbol_after_without_space** (`Bool`) — default: `false`\n\nWhether a space between the amount and the money symbol should be inserted\nwhen `:symbol_first` is `false`. The default is `false` (meaning space).\nIgnored if `:symbol` is `false` or `:symbol_first` is `true`.\n\n```\n# Default is to insert a space.\nMoney.new(100, \"USD\").format(symbol_first: false) # => \"1.00 $\"\n\n# If set to true, will not insert a space.\nMoney.new(100, \"USD\").format(symbol_first: false, symbol_after_without_space: true) # => \"1.00$\"\n```\n\n**separator** (`Bool | String`) — default: `true`\n\nWhether the currency should be separated by the specified character or \".\".\n\n```\n# If a string is specified, it's value is used.\nMoney.new(100, \"USD\").format(separator: \",\") # => \"$1,00\"\n\n# If the separator for a given currency isn't known, then it will default\n# to \".\" as separator.\nMoney.new(100, \"FOO\").format # => \"$1.00\"\n```\n\n**delimiter** (`Bool | String`) — default: `true`\n\nWhether the currency should be delimited by the specified character or \",\".\n\n```\n# If falsy value is specified, no delimiter is used.\nMoney.new(100000, \"USD\").format(delimiter: false) # => \"1000.00\"\nMoney.new(100000, \"USD\").format(delimiter: nil)   # => \"1000.00\"\nMoney.new(100000, \"USD\").format(delimiter: \"\")    # => \"1000.00\"\n\n# If a string is specified, it's value is used.\nMoney.new(100000, \"USD\").format(delimiter: \".\") # => \"$1.000.00\"\n\n# If the delimiter for a given currency isn't known, then it will\n# default to \",\" as delimiter.\nMoney.new(100000, \"FOO\").format # => \"$1,000.00\"\n```\n\n**html** (`Bool`) — default: `false`\n\nWhether the currency should be HTML-formatted.\n\n```\nMoney.new(1999, \"RUB\").format(html: true, no_cents: true) # => \"19 &#x20BD;\"\n```","summary":"<p>Creates a formatted price string according to several rules.</p>","abstract":false,"args":[{"name":"options","external_name":"options","restriction":"NamedTuple"}],"args_string":"(options : NamedTuple) : String","args_html":"(options : NamedTuple) : String","location":{"filename":"src/money/money/formatting.cr","line_number":180,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/formatting.cr#L180"},"def":{"name":"format","args":[{"name":"options","external_name":"options","restriction":"NamedTuple"}],"return_type":"String","visibility":"Public","body":"default_options = {display_free: false, sign_positive: false, with_currency: false, html: false, no_cents: false, no_cents_if_whole: false, drop_trailing_zeros: false, disambiguate: false, symbol_before_without_space: true, symbol_after_without_space: false, symbol_first: currency.symbol_first? || false, separator: currency.decimal_mark || \".\", delimiter: currency.thousands_separator || \",\"}\noptions = default_options.merge(options)\n{% for key in [:separator, :delimiter] of ::Symbol %}\n        if options[{{ key }}] === true\n          options = options.merge {{ key.id }}: default_options[{{ key }}]\n        end\n      {% end %}\nif zero?\n  display_free = options[:display_free]\n  if display_free.is_a?(String)\n    return display_free\n  end\nend\nparts = amount.abs.to_s.split('.')\nunit, subunit = parts[0], parts[1]?\nif subunit == \"0\"\n  subunit = nil\nend\nformatted = unit\ndelimiter = options[:delimiter]\nif delimiter\n  formatted = formatted.gsub(DELIMITER_REGEX) do |digit_to_delimit|\n    \"#{digit_to_delimit}#{delimiter}\"\n  end\nend\ndisplay_cents = true\nif options[:no_cents] || (options[:no_cents_if_whole] && (!subunit))\n  display_cents = false\nend\ndecimal_places = currency.decimal_places\nif display_cents && decimal_places > 0\n  subunit = subunit.to_s.ljust(decimal_places, '0')\n  if options[:drop_trailing_zeros]\n    subunit = subunit.rstrip('0')\n  end\n  if subunit.empty?\n  else\n    formatted = formatted + \"#{options[:separator]}#{subunit}\"\n  end\nend\nsign = negative? ? '-' : (options[:sign_positive] && positive?) ? '+' : nil\ndefault_symbol = if options[:disambiguate] && currency.disambiguate_symbol\n  currency.disambiguate_symbol\nelse\n  currency.symbol || \"¤\"\nend\nsymbol = if options.has_key?(:symbol)\n  case options[:symbol]?\n  when true\n    default_symbol\n  when String\n    options[:symbol]?\n  end\nelse\n  default_symbol\nend\nif options[:html]\n  if html_entity = currency.html_entity\n    symbol = html_entity\n  end\nend\nif symbol.is_a?(String) && (!symbol.empty?)\n  if options[:symbol_first]\n    symbol_space = options[:symbol_before_without_space] ? nil : ' '\n    formatted = \"#{sign}#{symbol}#{symbol_space}#{formatted}\"\n  else\n    symbol_space = options[:symbol_after_without_space] ? nil : ' '\n    formatted = \"#{sign}#{formatted}#{symbol_space}#{symbol}\"\n  end\nelse\n  formatted = \"#{sign}#{formatted}\"\nend\nif options[:with_currency]\n  formatted = formatted + \" #{currency}\"\nend\nformatted\n"}},{"html_id":"format(**options):String-instance-method","name":"format","doc":"Creates a formatted price string according to several rules.\n\n**display_free** (`Bool | String`) — default: `false`\n\nWhether a zero amount of money should be formatted as the supplied string.\n\n```\nMoney.us_dollar(0).format(display_free: \"gratis\") # => \"gratis\"\nMoney.us_dollar(0).format                         # => \"$0.00\"\n```\n\n**sign_positive** (`Bool`) — default: `false`\n\nWhether positive numbers should be signed, too.\n\n```\n# You can specify to display the sign with positive numbers\nMoney.new(100, \"GBP\").format(sign_positive: true) # => \"+£1.00\"\nMoney.new(100, \"GBP\").format                      # => \"£1.00\"\n```\n\n**with_currency** (`Bool`) — default: `false`\n\nWhether the currency name should be appended to the result string.\n\n```\nMoney.us_dollar(100).format                      # => \"$1.00\"\nMoney.us_dollar(100).format(with_currency: true) # => \"$1.00 USD\"\nMoney.us_dollar(85).format(with_currency: true)  # => \"$0.85 USD\"\n```\n\n**no_cents** (`Bool`) — default: `false`\n\nWhether cents should be omitted.\n\n```\nMoney.us_dollar(100).format(no_cents: true) # => \"$1\"\nMoney.us_dollar(599).format(no_cents: true) # => \"$5\"\n```\n\n**no_cents_if_whole** (`Bool`) — default: `false`\n\nWhether cents should be omitted if the cent value is zero.\n\n```\nMoney.us_dollar(10000).format(no_cents_if_whole: true) # => \"$100\"\nMoney.us_dollar(10034).format(no_cents_if_whole: true) # => \"$100.34\"\n```\n\n**drop_trailing_zeros** (`Bool`) — default: `false`\n\n```\nMoney.new(89000, :btc).format(drop_trailing_zeros: true) # => ฿0.00089\nMoney.new(110, :usd).format(drop_trailing_zeros: true)   # => $1.1\n```\n\n**symbol_first** (`Bool`) — default: `false`\n\nWhether a money symbol should go before the amount.\n\n```\nMoney.new(10000, \"USD\").format(symbol_first: true)  # => \"$100.00\"\nMoney.new(10000, \"USD\").format(symbol_first: false) # => \"100.00 $\"\n```\n\n**symbol** (`Bool | String`) — default: `true`\n\nWhether a money symbol should be prepended to the result string.\nThis method attempts to pick a symbol that's suitable for the given currency.\n\n```\nMoney.new(100, \"USD\") # => \"$1.00\"\nMoney.new(100, \"GBP\") # => \"£1.00\"\nMoney.new(100, \"EUR\") # => \"€1.00\"\n\n# Same thing.\nMoney.new(100, \"USD\").format(symbol: true) # => \"$1.00\"\nMoney.new(100, \"GBP\").format(symbol: true) # => \"£1.00\"\nMoney.new(100, \"EUR\").format(symbol: true) # => \"€1.00\"\n\n# You can pass `false` or an empty string to disable\n# prepending a money symbol.\nMoney.new(100, \"USD\").format(symbol: false) # => \"1.00\"\nMoney.new(100, \"GBP\").format(symbol: nil)   # => \"1.00\"\nMoney.new(100, \"EUR\").format(symbol: \"\")    # => \"1.00\"\n\n# If the symbol for the given currency isn't known, then it will default\n# to \"¤\" as symbol.\nMoney.new(100, \"XBC\").format(symbol: true) # => \"1.00 ¤\"\n\n# You can specify a string as value to enforce using a particular symbol.\nMoney.new(100, \"XBC\").format(symbol: \"ƒ\") # => \"1.00 ƒ\"\n```\n\n**disambiguate** (`Bool`) — default: `false`\n\nPrevents the result from being ambiguous due to equal symbols for different currencies.\nUses the `disambiguate_symbol`.\n\n```\nMoney.new(100, \"USD\").format(disambiguate: false) # => \"$100.00\"\nMoney.new(100, \"CAD\").format(disambiguate: false) # => \"$100.00\"\nMoney.new(100, \"USD\").format(disambiguate: true)  # => \"US$100.00\"\nMoney.new(100, \"CAD\").format(disambiguate: true)  # => \"C$100.00\"\n```\n\n**symbol_before_without_space** (`Bool`) — default: `true`\n\nWhether a space between the money symbol and the amount should be inserted\nwhen `:symbol_first` is `true`. The default is `true` (meaning no space).\nIgnored if `:symbol` is `false` or `:symbol_first` is `false`.\n\n```\n# Default is to not insert a space.\nMoney.new(100, \"USD\").format # => \"$1.00\"\n\n# Same thing.\nMoney.new(100, \"USD\").format(symbol_before_without_space: true) # => \"$1.00\"\n\n# If set to false, will insert a space.\nMoney.new(100, \"USD\").format(symbol_before_without_space: false) # => \"$ 1.00\"\n```\n\n**symbol_after_without_space** (`Bool`) — default: `false`\n\nWhether a space between the amount and the money symbol should be inserted\nwhen `:symbol_first` is `false`. The default is `false` (meaning space).\nIgnored if `:symbol` is `false` or `:symbol_first` is `true`.\n\n```\n# Default is to insert a space.\nMoney.new(100, \"USD\").format(symbol_first: false) # => \"1.00 $\"\n\n# If set to true, will not insert a space.\nMoney.new(100, \"USD\").format(symbol_first: false, symbol_after_without_space: true) # => \"1.00$\"\n```\n\n**separator** (`Bool | String`) — default: `true`\n\nWhether the currency should be separated by the specified character or \".\".\n\n```\n# If a string is specified, it's value is used.\nMoney.new(100, \"USD\").format(separator: \",\") # => \"$1,00\"\n\n# If the separator for a given currency isn't known, then it will default\n# to \".\" as separator.\nMoney.new(100, \"FOO\").format # => \"$1.00\"\n```\n\n**delimiter** (`Bool | String`) — default: `true`\n\nWhether the currency should be delimited by the specified character or \",\".\n\n```\n# If falsy value is specified, no delimiter is used.\nMoney.new(100000, \"USD\").format(delimiter: false) # => \"1000.00\"\nMoney.new(100000, \"USD\").format(delimiter: nil)   # => \"1000.00\"\nMoney.new(100000, \"USD\").format(delimiter: \"\")    # => \"1000.00\"\n\n# If a string is specified, it's value is used.\nMoney.new(100000, \"USD\").format(delimiter: \".\") # => \"$1.000.00\"\n\n# If the delimiter for a given currency isn't known, then it will\n# default to \",\" as delimiter.\nMoney.new(100000, \"FOO\").format # => \"$1,000.00\"\n```\n\n**html** (`Bool`) — default: `false`\n\nWhether the currency should be HTML-formatted.\n\n```\nMoney.new(1999, \"RUB\").format(html: true, no_cents: true) # => \"19 &#x20BD;\"\n```","summary":"<p>Creates a formatted price string according to several rules.</p>","abstract":false,"location":{"filename":"src/money/money/formatting.cr","line_number":282,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/formatting.cr#L282"},"def":{"name":"format","double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"String","visibility":"Public","body":"format(options)"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"See `#format`.","summary":"<p>See <code><a href=\"../Money/Formatting.html#format%28%2A%2Aoptions%29%3AString-instance-method\">#format</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/money/money/formatting.cr","line_number":287,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/formatting.cr#L287"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << format"}}]},{"html_id":"money/Money/Parse","path":"Money/Parse.html","kind":"module","full_name":"Money::Parse","name":"Parse","abstract":false,"locations":[{"filename":"src/money/money/parse.cr","line_number":2,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/parse.cr#L2"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PATTERNS","name":"PATTERNS","value":"{/(?<sign>\\+|\\-)?(?<amount>\\d+(?:[.,]\\d+)?)\\s*(?<symbol>[^0-9,.]+)/, /(?<sign>\\+|\\-)?(?<symbol>[^0-9,.]+)\\s*(?<amount>\\d+(?:[.,]\\d+)?)/}"}],"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"instance_methods":[{"html_id":"parse(str:String,allow_ambiguous=true):Money-instance-method","name":"parse","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"allow_ambiguous","default_value":"true","external_name":"allow_ambiguous","restriction":""}],"args_string":"(str : String, allow_ambiguous = true) : Money","args_html":"(str : String, allow_ambiguous = <span class=\"n\">true</span>) : <a href=\"../Money.html\">Money</a>","location":{"filename":"src/money/money/parse.cr","line_number":13,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/parse.cr#L13"},"def":{"name":"parse","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"allow_ambiguous","default_value":"true","external_name":"allow_ambiguous","restriction":""}],"return_type":"Money","visibility":"Public","body":"parse(str, allow_ambiguous) do |ex|\n  raise(ex)\nend"}},{"html_id":"parse?(str:String,allow_ambiguous=true):Money|Nil-instance-method","name":"parse?","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"allow_ambiguous","default_value":"true","external_name":"allow_ambiguous","restriction":""}],"args_string":"(str : String, allow_ambiguous = true) : Money | Nil","args_html":"(str : String, allow_ambiguous = <span class=\"n\">true</span>) : <a href=\"../Money.html\">Money</a> | Nil","location":{"filename":"src/money/money/parse.cr","line_number":17,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/parse.cr#L17"},"def":{"name":"parse?","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"allow_ambiguous","default_value":"true","external_name":"allow_ambiguous","restriction":""}],"return_type":"Money | ::Nil","visibility":"Public","body":"parse(str, allow_ambiguous) do\n  nil\nend"}}],"types":[{"html_id":"money/Money/Parse/Error","path":"Money/Parse/Error.html","kind":"class","full_name":"Money::Parse::Error","name":"Error","abstract":false,"superclass":{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},"ancestors":[{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/money/parse.cr","line_number":3,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/money/parse.cr#L3"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money/Parse","kind":"module","full_name":"Money::Parse","name":"Parse"}}]},{"html_id":"money/Money/UndefinedSmallestDenominationError","path":"Money/UndefinedSmallestDenominationError.html","kind":"class","full_name":"Money::UndefinedSmallestDenominationError","name":"UndefinedSmallestDenominationError","abstract":false,"superclass":{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},"ancestors":[{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/error.cr","line_number":16,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L16"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"},"doc":"Raised when smallest denomination of a currency is not defined.","summary":"<p>Raised when smallest denomination of a currency is not defined.</p>","constructors":[{"html_id":"new(message=\"Smallestdenominationofthiscurrencyisnotdefined\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"Smallest denomination of this currency is not defined\"","external_name":"message","restriction":""}],"args_string":"(message = \"Smallest denomination of this currency is not defined\")","args_html":"(message = <span class=\"s\">&quot;Smallest denomination of this currency is not defined&quot;</span>)","location":{"filename":"src/money/error.cr","line_number":17,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L17"},"def":{"name":"new","args":[{"name":"message","default_value":"\"Smallest denomination of this currency is not defined\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"money/Money/UnknownCurrencyError","path":"Money/UnknownCurrencyError.html","kind":"class","full_name":"Money::UnknownCurrencyError","name":"UnknownCurrencyError","abstract":false,"superclass":{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},"ancestors":[{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/error.cr","line_number":5,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L5"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}},{"html_id":"money/Money/UnknownRateError","path":"Money/UnknownRateError.html","kind":"class","full_name":"Money::UnknownRateError","name":"UnknownRateError","abstract":false,"superclass":{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},"ancestors":[{"html_id":"money/Money/Error","kind":"class","full_name":"Money::Error","name":"Error"},{"html_id":"money/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"money/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"money/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/money/error.cr","line_number":8,"url":"https://github.com/crystal-money/money/blob/86f9d10/src/money/error.cr#L8"}],"repository_name":"money","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"money/Money","kind":"struct","full_name":"Money","name":"Money"}}]}]}})